DEFINE INSTALL_SCHEMA='&1'

SET VERIFY OFF;

/* ****************************** Supporting Types ******************************** */

CREATE OR REPLACE TYPE &&INSTALL_SCHEMA..T_Token
AUTHID CURRENT_USER
AS OBJECT (

/****t* OBJECT TYPE/T_TOKEN
*  NAME
*    T_TOKEN -- Object type representing a single cell in a matrix of non-overlapping (no gaps) cells.
*  DESCRIPTION
*    An object type that represents a single cell within an array of
*    optimized rectanges representing a grid or matrix of "raster" style objects.
*    Used mainly with T_TOKENs in PIPELINED T_GEOMETRY methods.
*  NOTES
*    No methods are declared on this type.
*  AUTHOR
*    Simon Greener
*  HISTORY
*    Simon Greener - Jan 2005 - Original coding.
*    Simon Greener - Jan 2013 - Port from GEOM Package.
*  COPYRIGHT
*    (c) 2012-2018 by TheSpatialDBAdvisor/Simon Greener
******/

  /****v* T_TOKEN/ATTRIBUTES(T_TOKEN)
  *  ATTRIBUTES
  *    id        -- unique identifier associated with token: starts from 1 for first token extracted through to max for last.
  *    token     -- The actual token.
  *    separator -- The trailing separator that was immediately after the token in the string.
  *  SOURCE
  */
  id        integer,
  token     varchar2(30000),
  separator varchar2(30000)
  /*******/
);
/
show errors

/****s* OBJECT TYPE ARRAY/T_TOKENS
*  NAME
*    T_TOKENS -- Object type representing a collection (array) of T_TOKEN objects.
*  DESCRIPTION
*    An array of T_TOKEN objects that represent an ordered set of tokens and separators extracted from a string by the Tokenizer function.
*    Used by PIPELINED Tokenizer function.
*  AUTHOR
*    Simon Greener
*  HISTORY
*    Simon Greener - Jan 2005 - Original coding.
*  COPYRIGHT
*    (c) 2012-2018 by TheSpatialDBAdvisor/Simon Greener
*  SOURCE
*/
CREATE OR REPLACE TYPE &&INSTALL_SCHEMA..T_TOKENS
           IS TABLE OF &&INSTALL_SCHEMA..T_TOKEN;
/*******/
/
show errors

CREATE OR REPLACE TYPE &&INSTALL_SCHEMA..T_INTVALUE
AUTHID CURRENT_USER
AS OBJECT (

/****t* OBJECT TYPE/T_INTVALUE
*  NAME
*    T_INTVALUE -- Object type representing a single integer in a series of integers.
*  DESCRIPTION
*    An object type that gives a name (IntValue) to a single integer within a series of integers generated by TOOLS.Generate_Series.
*  AUTHOR
*    Simon Greener
*  HISTORY
*    Simon Greener - Jan 2005 - Original coding.
*    Simon Greener - Jan 2013 - Port from GEOM Package.
*  COPYRIGHT
*    (c) 2012-2018 by TheSpatialDBAdvisor/Simon Greener
******/
  /****v* T_INTVALUE/ATTRIBUTES(T_INTVALUE)
  *  ATTRIBUTES
  *    IntValue -- Integer value returned by generate_series
  *  SOURCE
  */
  IntValue Integer
  /*******/
);
/
show errors

/****s* OBJECT TYPE ARRAY/T_INTVALUES
*  NAME
*    T_INTVALUES -- Object type representing a collection (array) of T_INTVALUE objects.
*  DESCRIPTION
*    An array of T_INTVALUE objects that represent an ordered set of tokens and separators extracted from a string by the Tokenizer function.
*    Used by PIPELINED Tokenizer function.
*  AUTHOR
*    Simon Greener
*  HISTORY
*    Simon Greener - Jan 2005 - Original coding.
*  COPYRIGHT
*    (c) 2012-2018 by TheSpatialDBAdvisor/Simon Greener
*  SOURCE
*/
CREATE OR REPLACE TYPE &&INSTALL_SCHEMA..T_INTVALUES
           IS TABLE OF &&INSTALL_SCHEMA..T_INTVALUE;
/*******/
/
show errors

WHENEVER SQLERROR EXIT FAILURE;

set serveroutput on size unlimited
DECLARE
   v_OK        boolean       := true;
   v_obj_names varchar2(100) := 'T_TOKEN,T_INTVALUE,T_TOKENS,T_INTVALUES,';
BEGIN
   FOR rec IN (select object_name,
                      object_name || '.' || object_Type as full_name,
                      status
                 from user_objects
                where INSTR(v_obj_names,object_name||',')<>0
  ) LOOP
      IF ( rec.status = 'VALID' ) Then
         dbms_output.put_line('Type ' || USER || '.' || rec.full_name || ' is valid.');
         execute immediate 'GRANT EXECUTE ON &&INSTALL_SCHEMA..' || rec.object_name || ' TO public WITH GRANT OPTION';
      ELSE
         dbms_output.put_line('Type ' || USER || '.' || rec.full_name || ' is invalid.');
         v_ok := false;
      END IF;
   END LOOP;
   IF ( NOT v_OK ) THEN
      RAISE_APPLICATION_ERROR(-20000,'One of ' || v_obj_names || ' failed to install.');
   END IF;
END;
/
SHOW ERRORS

/* *************** TOOLS PACKAGE ******************************** */

CREATE OR REPLACE PACKAGE &&INSTALL_SCHEMA..TOOLS
AUTHID CURRENT_USER
As
/****h* PACKAGE/TOOLS
*  NAME
*    TOOLS - A collection of common functions used by other packages and object types.
*  DESCRIPTION
*    A package that publishes a collection of common functions used by other packages and object types.
*  AUTHOR
*    Simon Greener
*  HISTORY
*    Simon Greener - Jan 2017 - Original coding.
*  COPYRIGHT
*    (c) 2005-2018 by TheSpatialDBAdvisor/Simon Greener
******/

  /****f* TOOLS/ST_DB_Version
  *  NAME
  *    ST_DB_Version -- Returns Database Version and sub version.
  *  SYNOPSIS
  *    Static Function ST_DB_Version
  *             Return Number Determinisitc
  *  DESCRIPTION
  *    This function return database version which is useful when handling Oracle functions that only appear in certain versions
  *  RESULT
  *    Database Version (NUMBER) - eg 11.2 Database(12.1)
  *  EXAMPLE
  *    select T_GEOMETRY.ST_DB_Version() as database_version
  *      from DUAL;
  *
  *    DATABASE_VERSION
  *    ----------------
  *    11.2
  *  AUTHOR
  *    Simon Greener
  *  HISTORY
  *    Simon Greener - May 2016 - Original coding.
  *  COPYRIGHT
  *    (c) 2012-2018 by TheSpatialDBAdvisor/Simon Greener
  ******/
  Function ST_DB_Version Return number deterministic;

  /****m* TOOLS/ST_isLocator
  *  NAME
  *    ST_isLocator -- Makes best effort to osee if database is a locator databases.
  *  SYNOPSIS
  *    Function ST_isLocator
  *      Return INTEGER Deterministic,
  *  DESCRIPTION
  *    A method that attempts to determine if the host database is a Locator database or has Spatial objects.
  *  RESULT
  *    BOOLEAN (INTEGER) -- 1 Is Locator else 0 (Spatial)
  *  EXAMPLE
  *    select T_GEOMETRY.ST_isLocator() as isLocator
  *      from dual;
  *
  *    ISLOCATOR
  *    ---------
  *    0
  *  AUTHOR
  *    Simon Greener
  *  HISTORY
  *    Simon Greener - Jan 2016 - Original coding.
  *  COPYRIGHT
  *    (c) 2012-2017 by TheSpatialDBAdvisor/Simon Greener
  ******/
  Function ST_isLocator Return Integer deterministic;

  /****f* TOOLS/Tokenizer [2.0]
   *  NAME
   *    Tokenizer - Splits any string into tokens and separators.
   *  SYNOPSIS
   *    Function Tokenizer (
   *                  p_string     varchar2,
   *               OR p_string     varchar2, 
   *                  p_separators varchar2 default ' '
   *             )
   *      Return T_Tokens Pipelined
   *
   *     Where T_Tokens is array of T_Token:
   *       id        integer,
   *       token     varchar2(30000),
   *       separator varchar2(30000)
   *     )
   *  DESCRIPTION
   *    Supplied a string and a list of separators this function returns resultant tokens as a table collection.
   *    Function returns both the token and the separator.
   *    Returned table collection contains a unique identifier to ensure tokens and separators are always correctly ordered.
   *  INPUTS
   *    p_string     (varchar 30000) - Any non-null string.
   *    p_separators (varchar 30000) - List of separators eg '(),'
   *  RESULT
   *    Table (Array) of T_TOKEN:
   *      id        (integer)       - Unique identifier for each row starting with first token/separator found.
   *      token     (varchar 30000) - Token between separators
   *      separator (varchar 30000) - Separator between tokens.
   *  EXAMPLE
   *    select t.id, t.token, t.separator
   *      from table(TOOLS.Tokenizer('LINESTRING(0 0,10 0,10 5,10 10,5 10,5 5)',',()')) t
   *
   *    ID TOKEN      SEPARATOR
   *    -- ---------- ---------
   *     1 LINESTRING         (
   *     2 0 0                ,
   *     3 10 0               ,
   *     4 10 5               ,
   *     5 10 10              ,
   *     6 5 10               ,
   *     7 5 5                )
   *
   *     7 rows selected
   *  AUTHOR
   *    Simon Greener
   *  HISTORY
   *    Simon Greener - Jan 2008 - Original coding.
   *  COPYRIGHT
   *    (c) 2008-2018 by TheSpatialDBAdvisor/Simon Greener
  ******/
  Function Tokenizer(p_string     In VarChar2,
                     p_separators In VarChar2 DEFAULT ' ')
    Return &&INSTALL_SCHEMA..T_Tokens Pipelined;

  Function Tokenizer(p_string     In clob,
                     p_separators In VarChar2 DEFAULT ' ')
    Return &&INSTALL_SCHEMA..T_Tokens Pipelined;

  /****f* TOOLS/TokenAggregator
  *  NAME
  *    TokenAggregator - A string aggregator.
  *  SYNOPSIS
  *    Function TokenAggregator(p_tokenSet  IN &&INSTALL_SCHEMA..T_Tokens,
  *                             p_delimiter IN VarChar2 DEFAULT ',')
  *      Return VarChar2 Deterministic;
  *  DESCRIPTION
  *    Takes a set of strings an aggregates/appends them using supplied separator
  *  INPUTS
  *    p_tokenSet  (T_Tokens) - The strings to be aggregated.
  *    p_separator (varchar2) - The character that is placed between each token string.
  *  NOTE
  *    Requires t_Tokens Object Type to exist.
  *  EXAMPLE
  *    with data as (
  *      select t.ID, T.TOKEN, T.sEPARATOR
  *        from table(TOOLS.Tokenizer('LINESTRING(0 0,10 0,10 5,10 10,5 10,5 5)',',()')) t
  *    )
  *    select TOOLS.TokenAggregator(tokens,',') AS result
  *      from (select CAST(COLLECT(codesys.T_Token(l.id,l.token,l.separator)) AS T_Tokens) as tokens
  *              from data l
  *          ) f;
  *
  *    RESULT
  *    ----------------------------------------
  *    LINESTRING(0 0,10 0,10 5,10 10,5 10,5 5)
  *  AUTHOR
  *     Simon Greener
  *  HISTORY
  *     Simon Greener - Jan 2011 - Original coding.
  *  COPYRIGHT
  *     (c) 2008-2018 by TheSpatialDBAdvisor/Simon Greener
  ******/
  Function TokenAggregator(p_tokenSet  IN &&INSTALL_SCHEMA..T_Tokens,
                           p_delimiter IN VarChar2 DEFAULT ',')
    Return VarChar2 Deterministic;

  /****f* TOOLS/Generate_Series
  *  NAME
  *    Generate_Series -- Function that generates a series of numbers mimicking PostGIS's function with the same name
  *  SYNOPSIS
  *    Function generate_series(p_start pls_integer,
  *                             p_end   pls_integer,
  *                             p_step  pls_integer
  *             )
  *      Return &&INSTALL_SCHEMA..T_IntValues Pipelined;
  *  EXAMPLE
  *    with data as (
  *      select sdo_geometry('LINESTRING(0 0,10 0,10 5,10 10,5 10,5 5)',null) as line
  *        from dual
  *    )
  *    select t.IntValue as point_id,
  *           v.x,
  *           v.y
  *      from data a,
  *           table(tools.generate_series(1,sdo_util.GetNumVertices(a.line),1)) t,
  *           table(sdo_util.getvertices(a.line)) v
  *     where v.id =t.intValue;
  *
  *      POINT_ID          X          Y
  *    ---------- ---------- ----------
  *             1          0          0
  *             2         10          0
  *             3         10          5
  *             4         10         10
  *             5          5         10
  *             6          5          5
  *
  *     6 rows selected
  * INPUTS
  *   p_start (Integer) - Starting value
  *   p_end   (Integer) - Ending value.
  *   p_step  (Integer) - The step value of the increment between start and end
  * RETURN
  *   Array of Integers (T_IntValues)
  *  AUTHOR
  *     Simon Greener
  *  HISTORY
  *     Simon Greener - Jan 2008 - Original coding.
  *  COPYRIGHT
  *     (c) 2008-2018 by TheSpatialDBAdvisor/Simon Greener
  ******/
  Function Generate_Series(p_start in pls_integer,
                           p_end   in pls_integer,
                           p_step  in pls_integer default 1)
    Return &&INSTALL_SCHEMA..T_IntValues Pipelined;

  /****f* TOOLS/ST_GetSridType
  *  NAME
  *    ST_GetSridType - Determines ref sys kind of provided p_srid
  *  SYNOPSIS
  *    Function ST_GetSridType(p_srid IN Integer)
  *      Return VarChar2 Deterministic;
  *  DESCRIPTION
  *    Given a null p_srid this function returns PLANAR.
  *    The the p_srid is not null the function checks the Mdsys.Sdo_Coord_Ref_System table's coord_ref_sys_kind column, mapping its values as follows:
  *      COMPOUND     ==> PLANAR,
  *      ENGINEERING  ==> PLANAR,
  *      GEOGENTRIC   ==> GEOGRAPHIC,
  *      GEOGRAPHIC2D ==> GEOGRAPHIC,
  *      GEOGRAPHIC3D ==> GEOGRAPHIC,
  *      PROJECTED    ==> PLANAR,
  *      VERTICAL     ==> GEOGRAPHIC,
  *  INPUTS
  *    p_srid (integer) - Returns PLANAR or GEOGRAPHIC
  *  NOTE
  *    Used mainly in determinining type of arithmetic to be used when calculating distances etc
  *  EXAMPLE
  *    select distinct f.sridType
  *      from (select Tools.ST_GetSridType(a.srid) as SridType
  *              from cs_srs a
  *             order by DBMS_RANDOM.VALUE
  *           ) f
  *     where rownum < 100;
  *
  *    SRIDTYPE
  *    ----------
  *    PLANAR
  *    GEOGRAPHIC
  *  AUTHOR
  *     Simon Greener
  *  HISTORY
  *     Simon Greener - Jan 2011 - Original coding.
  *  COPYRIGHT
  *     (c) 2008-2018 by TheSpatialDBAdvisor/Simon Greener
  ******/
  Function ST_GetSridType(p_srid In integer)
    Return varchar2 deterministic;

END TOOLS;
/
show errors

Prompt Check package has compiled correctly ...
WHENEVER SQLERROR EXIT FAILURE;
DECLARE
   v_OK       boolean := true;
   v_obj_name varchar2(30) := 'TOOLS';
BEGIN
   FOR rec IN (select object_name || '.' || object_Type as package_name, status
                 from user_objects
                where object_name = v_obj_name
                  and object_type = 'PACKAGE'
              ) LOOP
      IF ( rec.status = 'VALID' ) Then
         dbms_output.put_line(USER || '.' || rec.package_name || ' is valid.');
      ELSE
         dbms_output.put_line(USER || '.' || rec.package_name || ' is invalid.');
         v_ok := false;
      END IF;
   END LOOP;
   IF ( NOT v_OK ) THEN
      RAISE_APPLICATION_ERROR(-20000,v_obj_name || ' failed to install.');
   END IF;
   EXECUTE IMMEDIATE 'GRANT EXECUTE ON &&INSTALL_SCHEMA..' || v_obj_name || ' TO PUBLIC WITH GRANT OPTION';
END;
/
SHOW ERRORS

grant execute on TOOLS to public;

EXIT SUCCESS;

