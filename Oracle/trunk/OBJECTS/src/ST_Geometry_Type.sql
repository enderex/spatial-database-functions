DEFINE INSTALL_SCHEMA='&1'

SET VERIFY OFF;

drop type &&INSTALL_SCHEMA..ST_GRIDCELL_ARRAY force;
drop type &&INSTALL_SCHEMA..ST_gridcell force;

create TYPE &&INSTALL_SCHEMA..ST_GridCell AS OBJECT (
   gcol  number,
   grow  number,
   geom  mdsys.sdo_geometry
);
/
show errors
create type &&INSTALL_SCHEMA..ST_GRIDCELL_ARRAY is table of &&INSTALL_SCHEMA..ST_GRIDCELL;
/
show errors

grant execute on &&INSTALL_SCHEMA..ST_GridCell to public;
grant execute on &&INSTALL_SCHEMA..ST_GridCell_Array to public;

DROP TYPE &&INSTALL_SCHEMA..ST_MULTIPOLYGON FORCE;
DROP TYPE &&INSTALL_SCHEMA..ST_MULTILINESTRING FORCE;
DROP TYPE &&INSTALL_SCHEMA..ST_MULTIPOINT FORCE;
DROP TYPE &&INSTALL_SCHEMA..ST_MULTICURVE FORCE;
DROP TYPE &&INSTALL_SCHEMA..ST_MULTISURFACE FORCE;

DROP TYPE &&INSTALL_SCHEMA..ST_GEOMCOLLECTION FORCE;

DROP TYPE &&INSTALL_SCHEMA..ST_POLYGON FORCE;
DROP TYPE &&INSTALL_SCHEMA..ST_CURVEPOLYGON  FORCE;
DROP TYPE &&INSTALL_SCHEMA..ST_SURFACE FORCE;

DROP TYPE &&INSTALL_SCHEMA..ST_COMPOUNDCURVE FORCE;
DROP TYPE &&INSTALL_SCHEMA..ST_CIRCULARSTRING FORCE;
DROP TYPE &&INSTALL_SCHEMA..ST_LINESTRING FORCE;
DROP TYPE &&INSTALL_SCHEMA..ST_CURVE FORCE;
DROP TYPE &&INSTALL_SCHEMA..ST_POINT FORCE;
DROP TYPE &&INSTALL_SCHEMA..ST_GEOMETRY FORCE;
purge recyclebin;

CREATE OR REPLACE TYPE &&INSTALL_SCHEMA..ST_GEOMETRY
AS OBJECT (
  GEOM SDO_GEOMETRY,
  MEMBER FUNCTION ST_Dimension RETURN Integer DETERMINISTIC,
  MEMBER FUNCTION ST_CoordDim RETURN SMALLINT DETERMINISTIC,
  MEMBER FUNCTION ST_GeometryType RETURN VARCHAR2 DETERMINISTIC,
  MEMBER FUNCTION ST_SRID RETURN INTEGER DETERMINISTIC,
  MEMBER FUNCTION ST_SRID(asrid INTEGER) RETURN &&INSTALL_SCHEMA..ST_Geometry DETERMINISTIC,
  MEMBER FUNCTION ST_Transform (asrid INTEGER) RETURN &&INSTALL_SCHEMA..ST_Geometry DETERMINISTIC,
  MEMBER FUNCTION ST_IsEmpty RETURN Integer DETERMINISTIC,
  MEMBER FUNCTION ST_IsSimple RETURN Integer DETERMINISTIC,
  MEMBER FUNCTION ST_IsValid RETURN INTEGER DETERMINISTIC,
  MEMBER FUNCTION ST_is3D RETURN INTEGER DETERMINISTIC,
  MEMBER FUNCTION ST_isMeasured RETURN INTEGER DETERMINISTIC,
  -- MEMBER FUNCTION ST_LocateAlong (measure number) RETURN &&INSTALL_SCHEMA..ST_Geometry DETERMINISTIC,
  -- MEMBER FUNCTION ST_LocateBetween (start_measure number,end_measure) RETURN &&INSTALL_SCHEMA..ST_Geometry DETERMINISTIC,
  MEMBER FUNCTION ST_Boundary RETURN &&INSTALL_SCHEMA..ST_GEOMETRY DETERMINISTIC,
  MEMBER FUNCTION ST_Envelope RETURN &&INSTALL_SCHEMA..ST_Geometry DETERMINISTIC,
  MEMBER FUNCTION ST_ConvexHull RETURN &&INSTALL_SCHEMA..ST_Geometry DETERMINISTIC,
  MEMBER FUNCTION ST_Buffer(adistance NUMBER, aunit varchar2 DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_Geometry DETERMINISTIC,
  MEMBER FUNCTION ST_Intersection(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN &&INSTALL_SCHEMA..ST_Geometry DETERMINISTIC,
  MEMBER FUNCTION ST_Union(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN &&INSTALL_SCHEMA..ST_Geometry DETERMINISTIC,
  MEMBER FUNCTION ST_Difference(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN &&INSTALL_SCHEMA..ST_Geometry DETERMINISTIC,
  MEMBER FUNCTION ST_SymmetricDifference(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN &&INSTALL_SCHEMA..ST_Geometry DETERMINISTIC,
  MEMBER FUNCTION ST_SymDifference(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN &&INSTALL_SCHEMA..ST_Geometry DETERMINISTIC,
  MEMBER FUNCTION ST_Distance(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN NUMBER DETERMINISTIC,
  MEMBER FUNCTION ST_Equals(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN Integer DETERMINISTIC,
  MEMBER FUNCTION ST_Relate(ageometry &&INSTALL_SCHEMA..ST_Geometry, PatternMatrix VARCHAR2) RETURN Integer DETERMINISTIC,
  MEMBER FUNCTION ST_Disjoint(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN Integer DETERMINISTIC,
  MEMBER FUNCTION ST_Intersects(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN Integer DETERMINISTIC,
  MEMBER FUNCTION ST_Touch(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN Integer DETERMINISTIC,
  MEMBER FUNCTION ST_Touches(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN Integer DETERMINISTIC,
  MEMBER FUNCTION ST_Cross(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN Integer DETERMINISTIC,
  MEMBER FUNCTION ST_Crosses(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN Integer DETERMINISTIC,
  MEMBER FUNCTION ST_Within(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN Integer DETERMINISTIC,
  MEMBER FUNCTION ST_Contains(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN Integer DETERMINISTIC,
  MEMBER FUNCTION ST_Overlap(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN Integer DETERMINISTIC,
  MEMBER FUNCTION ST_Overlaps(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN Integer DETERMINISTIC,

  -- SQLMM only in ST_Surface type .....
  MEMBER FUNCTION ST_Centroid RETURN &&INSTALL_SCHEMA..ST_Geometry DETERMINISTIC,

  STATIC FUNCTION ST_WKTToSQL(AWKT     CLOB, ASRID INTEGER DEFAULT NULL)     RETURN &&INSTALL_SCHEMA..ST_GEOMETRY DETERMINISTIC,
  STATIC FUNCTION ST_WKTTOSQL(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL)     RETURN &&INSTALL_SCHEMA..ST_GEOMETRY DETERMINISTIC,            
  STATIC FUNCTION ST_GeomFromText(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_GEOMETRY DETERMINISTIC,
  STATIC FUNCTION ST_GeomFromText(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_GEOMETRY DETERMINISTIC,            
  
  STATIC FUNCTION ST_WKBTOSQL(AWKB BLOB, ASRID INTEGER DEFAULT NULL)         RETURN &&INSTALL_SCHEMA..ST_GEOMETRY DETERMINISTIC,
  STATIC FUNCTION ST_GeomFromWKB(AWKB BLOB, ASRID INTEGER DEFAULT NULL)      RETURN &&INSTALL_SCHEMA..ST_GEOMETRY DETERMINISTIC,

  MEMBER FUNCTION ST_ASTEXT   RETURN CLOB DETERMINISTIC,
  MEMBER FUNCTION ST_AsBinary RETURN BLOB DETERMINISTIC,
  
  -- Non-standard methods
  STATIC FUNCTION ST_FROM_SDO_GEOM(AGEOMETRY MDSYS.SDO_GEOMETRY)       RETURN &&INSTALL_SCHEMA..ST_GEOMETRY DETERMINISTIC,
  MEMBER FUNCTION ST_GET_SDO_GEOM                                      RETURN MDSYS.SDO_GEOMETRY DETERMINISTIC,  
  MEMBER FUNCTION ST_GetTolerance                                      RETURN NUMBER DETERMINISTIC,
  MEMBER FUNCTION ST_Geom2Grid(p_TileX  In Number, p_TileY  In Number) RETURN &&INSTALL_SCHEMA..ST_GridCell_Array PIPELINED 

) NOT FINAL;
/
show errors

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_GEOMETRY TO PUBLIC;

-- *********************************************************************************************

create or replace type &&INSTALL_SCHEMA..ST_POINT
UNDER &&INSTALL_SCHEMA..ST_GEOMETRY (
  CONSTRUCTOR FUNCTION ST_Point(xcoord DOUBLE PRECISION, ycoord DOUBLE PRECISION, asrid INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_Point(xcoord DOUBLE PRECISION, ycoord DOUBLE PRECISION, zcoord DOUBLE PRECISION, asrid INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_Point(xcoord DOUBLE PRECISION, ycoord DOUBLE PRECISION, zcoord DOUBLE PRECISION, mcoord DOUBLE PRECISION, asrid INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_Point(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_Point(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_Point(AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  OVERRIDING MEMBER FUNCTION ST_Dimension                  RETURN Integer DETERMINISTIC,
  MEMBER FUNCTION ST_X                                     RETURN DOUBLE PRECISION DETERMINISTIC,
  MEMBER FUNCTION ST_X(xcoord DOUBLE PRECISION)            RETURN &&INSTALL_SCHEMA..ST_Point,
  MEMBER FUNCTION ST_Y                                     RETURN DOUBLE PRECISION DETERMINISTIC,
  MEMBER FUNCTION ST_Y(ycoord DOUBLE PRECISION)            RETURN &&INSTALL_SCHEMA..ST_POINT,
  MEMBER FUNCTION ST_Z                                     RETURN DOUBLE PRECISION DETERMINISTIC,
  MEMBER FUNCTION ST_Z(zcoord DOUBLE PRECISION)            RETURN &&INSTALL_SCHEMA..ST_Point,
  MEMBER FUNCTION ST_M                                     RETURN DOUBLE PRECISION DETERMINISTIC,
  MEMBER FUNCTION ST_M(mcoord DOUBLE PRECISION)            RETURN &&INSTALL_SCHEMA..ST_POINT,
  MEMBER FUNCTION ST_EXPLICITPOINT                         RETURN MDSYS.ST_DOUBLE_PRECISION_ARRAY DETERMINISTIC,
  STATIC FUNCTION ST_PointFromText(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_POINT DETERMINISTIC,
  STATIC FUNCTION ST_PointFromText(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_POINT DETERMINISTIC,
  STATIC FUNCTION ST_PointFromWKB (AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_POINT DETERMINISTIC 
);
/
show errors

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_POINT TO PUBLIC;

-- *********************************************************************************************
-- Technically Not Instantiable

create or replace type &&INSTALL_SCHEMA..ST_CURVE
UNDER &&INSTALL_SCHEMA..ST_GEOMETRY (
  OVERRIDING MEMBER FUNCTION ST_DIMENSION RETURN INTEGER DETERMINISTIC,
  MEMBER FUNCTION ST_Points RETURN mdsys.ST_Point_Array DETERMINISTIC,
  MEMBER FUNCTION ST_NumPoints RETURN INTEGER DETERMINISTIC,
  MEMBER FUNCTION ST_PointN(aposition INTEGER) RETURN &&INSTALL_SCHEMA..ST_Point DETERMINISTIC,
  MEMBER FUNCTION ST_ISCLOSED RETURN INTEGER DETERMINISTIC,
  MEMBER FUNCTION ST_MidPointRep RETURN mdsys.ST_Point_Array DETERMINISTIC,
  MEMBER FUNCTION ST_StartPoint RETURN &&INSTALL_SCHEMA..ST_Point DETERMINISTIC,
  MEMBER FUNCTION ST_EndPoint RETURN &&INSTALL_SCHEMA..ST_Point DETERMINISTIC,
  OVERRIDING MEMBER FUNCTION ST_IsSimple RETURN Integer DETERMINISTIC,
  MEMBER FUNCTION ST_IsRing RETURN Integer DETERMINISTIC,
  MEMBER FUNCTION ST_Length RETURN NUMBER DETERMINISTIC
) NOT FINAL;
/
show errors

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_CURVE TO PUBLIC;

-- *********************************************************************************************

CREATE OR REPLACE TYPE &&INSTALL_SCHEMA..ST_LINESTRING
UNDER &&INSTALL_SCHEMA..ST_CURVE (
  CONSTRUCTOR FUNCTION ST_LINESTRING(apointarray MDSYS.ST_POINT_ARRAY, asrid INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_LINESTRING(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_LINESTRING(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_LINESTRING(AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  OVERRIDING MEMBER FUNCTION ST_ISSIMPLE                                               RETURN INTEGER DETERMINISTIC,
  MEMBER FUNCTION ST_POINTS(APOINTARRAY MDSYS.ST_POINT_ARRAY)                          RETURN &&INSTALL_SCHEMA..ST_LINESTRING,
  STATIC FUNCTION ST_LineFromText(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL)           RETURN &&INSTALL_SCHEMA..ST_LINESTRING DETERMINISTIC,
  STATIC FUNCTION ST_LineFromText(AWKT     CLOB, ASRID INTEGER DEFAULT NULL)           RETURN &&INSTALL_SCHEMA..ST_LINESTRING DETERMINISTIC,
  STATIC FUNCTION ST_LineFromWKB (AWKB     BLOB, ASRID INTEGER DEFAULT NULL)           RETURN &&INSTALL_SCHEMA..ST_LINESTRING DETERMINISTIC 
);
/
show errors

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_LINESTRING TO PUBLIC;

-- *********************************************************************************************

create or replace type &&INSTALL_SCHEMA..ST_CIRCULARSTRING
UNDER &&INSTALL_SCHEMA..ST_CURVE (
  CONSTRUCTOR FUNCTION ST_CIRCULARSTRING(APOINTARRAY MDSYS.ST_POINT_ARRAY, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_CIRCULARSTRING(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_CIRCULARSTRING(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_CIRCULARSTRING(AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  STATIC FUNCTION ST_CircularFromTxt(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL)     RETURN &&INSTALL_SCHEMA..ST_CIRCULARSTRING DETERMINISTIC,
  STATIC FUNCTION ST_CircularFromTxt(AWKT     CLOB, ASRID INTEGER DEFAULT NULL)     RETURN &&INSTALL_SCHEMA..ST_CIRCULARSTRING DETERMINISTIC,
  STATIC FUNCTION ST_CircularFromWKB(AWKB     BLOB, ASRID INTEGER DEFAULT NULL)     RETURN &&INSTALL_SCHEMA..ST_CIRCULARSTRING DETERMINISTIC,
  MEMBER FUNCTION ST_Points(apointarray MDSYS.ST_Point_Array) RETURN &&INSTALL_SCHEMA..ST_CircularString
);
/
show errors

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_CIRCULARSTRING TO PUBLIC;

-- *********************************************************************************************

create or replace type &&INSTALL_SCHEMA..ST_COMPOUNDCURVE
under &&INSTALL_SCHEMA..ST_CURVE (
  CONSTRUCTOR FUNCTION ST_COMPOUNDCURVE(ACURVE &&INSTALL_SCHEMA..ST_CURVE,                  ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_COMPOUNDCURVE(ACURVEARRAY MDSYS.ST_CURVE_ARRAY, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_COMPOUNDCURVE(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_COMPOUNDCURVE(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_COMPOUNDCURVE(AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  MEMBER FUNCTION ST_CURVES                                                              RETURN MDSYS.ST_CURVE_ARRAY DETERMINISTIC,
  MEMBER FUNCTION ST_Curves(acurvearray MDSYS.ST_Curve_Array)                            RETURN &&INSTALL_SCHEMA..ST_CompoundCurve,
  MEMBER FUNCTION ST_NumCurves                                                           RETURN INTEGER DETERMINISTIC,
  MEMBER FUNCTION ST_CurveN(aposition INTEGER)                                           RETURN &&INSTALL_SCHEMA..ST_Curve DETERMINISTIC,
  STATIC FUNCTION ST_CompoundFromTxt(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL)     RETURN &&INSTALL_SCHEMA..ST_COMPOUNDCURVE DETERMINISTIC,
  STATIC FUNCTION ST_CompoundFromTxt(AWKT     CLOB, ASRID INTEGER DEFAULT NULL)     RETURN &&INSTALL_SCHEMA..ST_COMPOUNDCURVE DETERMINISTIC,
  STATIC FUNCTION ST_CompoundFromWKB(AWKB     BLOB, ASRID INTEGER DEFAULT NULL)     RETURN &&INSTALL_SCHEMA..ST_COMPOUNDCURVE DETERMINISTIC
);
/
show errors

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_COMPOUNDCURVE TO PUBLIC;

-- *********************************************************************************************
-- Technically Not Instantiable

CREATE OR REPLACE TYPE &&INSTALL_SCHEMA..ST_SURFACE
UNDER &&INSTALL_SCHEMA..ST_GEOMETRY (
  OVERRIDING MEMBER FUNCTION ST_Dimension RETURN Integer       DETERMINISTIC,
  MEMBER FUNCTION ST_PointOnSurface       RETURN &&INSTALL_SCHEMA..ST_Point DETERMINISTIC,
  MEMBER FUNCTION ST_Area                 RETURN NUMBER        DETERMINISTIC
) NOT FINAL;
/
show errors

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_SURFACE TO PUBLIC;

-- *********************************************************************************************

CREATE OR REPLACE
TYPE &&INSTALL_SCHEMA..ST_CURVEPOLYGON
under &&INSTALL_SCHEMA..ST_SURFACE (
  CONSTRUCTOR function ST_CURVEPOLYGON(ACURVE &&INSTALL_SCHEMA..ST_CURVE, ASRID integer default null) return SELF as RESULT,
  CONSTRUCTOR FUNCTION ST_CURVEPOLYGON(acurve &&INSTALL_SCHEMA..ST_CURVE, acurvearray MDSYS.ST_CURVE_ARRAY, asrid INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_CURVEPOLYGON(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_CURVEPOLYGON(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_CURVEPOLYGON(AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  
  member function ST_EXTERIORRING                                    return &&INSTALL_SCHEMA..ST_CURVE DETERMINISTIC,
  MEMBER FUNCTION ST_EXTERIORRING(ACURVE &&INSTALL_SCHEMA..ST_CURVE) RETURN &&INSTALL_SCHEMA..ST_CURVEPOLYGON DETERMINISTIC,
  MEMBER FUNCTION ST_INTERIORRINGS                                   RETURN mdsys.ST_CURVE_ARRAY DETERMINISTIC,
  MEMBER FUNCTION ST_InteriorRings(acurvearray MDSYS.ST_Curve_Array) RETURN &&INSTALL_SCHEMA..ST_CurvePolygon DETERMINISTIC,
  /* Note: ST_NumInteriorRing returns incorrect value as includes exterior ring */
  MEMBER FUNCTION ST_NumInteriorRing                                 RETURN INTEGER DETERMINISTIC,
  MEMBER FUNCTION ST_InteriorRingN(aposition INTEGER)                RETURN &&INSTALL_SCHEMA..ST_Curve DETERMINISTIC
--  MEMBER FUNCTION ST_CurvePolyToPoly RETURN &&INSTALL_SCHEMA..ST_Polygon
) NOT FINAL;
/
show errors

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_CURVEPOLYGON TO PUBLIC;

-- *********************************************************************************************

CREATE OR REPLACE TYPE &&INSTALL_SCHEMA..ST_POLYGON
UNDER &&INSTALL_SCHEMA..ST_CURVEPOLYGON (
  CONSTRUCTOR FUNCTION ST_POLYGON(ALINESTRING ST_LINESTRING,                                             ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_POLYGON(alinestring ST_LineString, alinestringarray MDSYS.ST_LineString_Array, asrid INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_POLYGON(xmin number, ymin number, xmax number, ymax number,                    asrid number default null) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_POLYGON(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_POLYGON(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_POLYGON(AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,

  OVERRIDING member function ST_EXTERIORRING                                    return &&INSTALL_SCHEMA..ST_LINESTRING DETERMINISTIC,
  OVERRIDING MEMBER FUNCTION ST_EXTERIORRING(ACURVE &&INSTALL_SCHEMA..ST_CURVE) RETURN &&INSTALL_SCHEMA..ST_POLYGON DETERMINISTIC,
  member function ST_INTERIORRINGSP                                             return MDSYS.ST_LINESTRING_ARRAY DETERMINISTIC,
  member function ST_INTERIORRINGSP(ACURVEARRAY MDSYS.ST_CURVE_ARRAY)           return &&INSTALL_SCHEMA..ST_POLYGON DETERMINISTIC,
  OVERRIDING member function ST_INTERIORRINGN(APOSITION integer)                return &&INSTALL_SCHEMA..ST_LINESTRING DETERMINISTIC,
  STATIC FUNCTION ST_PolyFromText(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL)    RETURN &&INSTALL_SCHEMA..ST_POLYGON DETERMINISTIC,
  static function ST_POLYFROMTEXT(AWKT clob, ASRID integer default null)        return &&INSTALL_SCHEMA..ST_POLYGON DETERMINISTIC,
  static function ST_POLYFROMWKB (AWKB blob, ASRID integer default null)        return &&INSTALL_SCHEMA..ST_POLYGON DETERMINISTIC,
  --  ST_BDPOLYGROMTEXT constructs a Polygon given an arbitrary collection of closed linestrings as a MultiLineString Well-Known text representation.
  static function ST_BDPOLYFROMTEXT(AWKT clob, ASRID integer default null)      return &&INSTALL_SCHEMA..ST_POLYGON DETERMINISTIC,
  static function ST_BDPOLYFROMTEXT(AWKT varchar2, ASRID integer default null)  return &&INSTALL_SCHEMA..ST_POLYGON DETERMINISTIC,
  STATIC FUNCTION ST_BDPOLYFROMWKB(AWKB BLOB, ASRID INTEGER DEFAULT NULL)       RETURN &&INSTALL_SCHEMA..ST_POLYGON DETERMINISTIC,
  -- Non standard
  STATIC FUNCTION ST_Envelope(xmin number, ymin number, xmax number, ymax number, asrid number default null) RETURN &&INSTALL_SCHEMA..ST_SURFACE DETERMINISTIC

);
/
show errors

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_POLYGON TO PUBLIC;

-- *********************************************************************************************

CREATE OR REPLACE TYPE &&INSTALL_SCHEMA..ST_GEOMCOLLECTION	
UNDER &&INSTALL_SCHEMA..ST_GEOMETRY (
  CONSTRUCTOR FUNCTION ST_GEOMCOLLECTION(AGEOMETRY &&INSTALL_SCHEMA..ST_GEOMETRY,             ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,              
  CONSTRUCTOR FUNCTION ST_GEOMCOLLECTION(AGEOMETRYARRAY MDSYS.ST_GEOMETRY_ARRAY, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  OVERRIDING MEMBER FUNCTION ST_DIMENSION                               RETURN INTEGER DETERMINISTIC,
  MEMBER FUNCTION ST_GEOMETRIES                                         RETURN MDSYS.ST_GEOMETRY_ARRAY DETERMINISTIC,
  MEMBER FUNCTION ST_GEOMETRIES(AGEOMETRYARRAY MDSYS.ST_GEOMETRY_ARRAY) RETURN &&INSTALL_SCHEMA..ST_GEOMCOLLECTION DETERMINISTIC,
  MEMBER FUNCTION ST_NUMGEOMETRIES                                      RETURN INTEGER DETERMINISTIC,
  MEMBER FUNCTION ST_GEOMETRYN(N INTEGER)                               RETURN &&INSTALL_SCHEMA..ST_GEOMETRY DETERMINISTIC
) NOT FINAL;
/
show errors

GRANT EXECUTE ON ST_GEOMCOLLECTION TO PUBLIC;

-- *********************************************************************************************

CREATE OR REPLACE TYPE &&INSTALL_SCHEMA..ST_MULTIPOINT
UNDER &&INSTALL_SCHEMA..ST_GEOMCOLLECTION (
  CONSTRUCTOR FUNCTION ST_MULTIPOINT(apointarray MDSYS.ST_Point_Array, asrid INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_MULTIPOINT(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_MULTIPOINT(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_MULTIPOINT(AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  OVERRIDING MEMBER FUNCTION ST_Dimension                                      RETURN Integer DETERMINISTIC,
  OVERRIDING MEMBER FUNCTION ST_ISSIMPLE                                       RETURN INTEGER DETERMINISTIC,
  STATIC FUNCTION ST_MPointFromText(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MULTIPOINT DETERMINISTIC,
  STATIC FUNCTION ST_MPointFromText(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MULTIPOINT DETERMINISTIC,
  STATIC FUNCTION ST_MPointFromWKB (AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MULTIPOINT DETERMINISTIC 
);
/
show errors

grant execute on &&INSTALL_SCHEMA..st_multipoint to public;

-- *********************************************************************************************
-- Techncically Not Instantiable

CREATE OR REPLACE TYPE &&INSTALL_SCHEMA..ST_MULTICURVE
UNDER &&INSTALL_SCHEMA..ST_GEOMCOLLECTION (
  CONSTRUCTOR FUNCTION ST_MULTICURVE(acurvearray MDSYS.ST_CURVE_ARRAY, asrid INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  OVERRIDING MEMBER FUNCTION ST_Dimension RETURN Integer DETERMINISTIC,
  OVERRIDING MEMBER FUNCTION ST_ISSIMPLE  RETURN INTEGER DETERMINISTIC,
  MEMBER FUNCTION ST_Length               RETURN NUMBER DETERMINISTIC,
  MEMBER FUNCTION ST_IsClosed             RETURN Integer DETERMINISTIC
) NOT FINAL;
/
show errors

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_MULTICURVE TO PUBLIC;

-- *********************************************************************************************

CREATE OR REPLACE TYPE &&INSTALL_SCHEMA..ST_MultiLineString
UNDER &&INSTALL_SCHEMA..ST_MULTICURVE (
  CONSTRUCTOR FUNCTION ST_MULTILINESTRING(ALINESTRINGARRAY MDSYS.ST_LINESTRING_ARRAY, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_MULTILINESTRING(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_MULTILINESTRING(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_MULTILINESTRING(AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  STATIC FUNCTION ST_MLineFromText(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MULTILINESTRING DETERMINISTIC,
  STATIC FUNCTION ST_MLineFromText(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MULTILINESTRING DETERMINISTIC,
  STATIC FUNCTION ST_MLineFromWKB (AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MULTILINESTRING DETERMINISTIC 
);
/
show errors

grant execute on &&INSTALL_SCHEMA..ST_MULTILINESTRING to public;

-- ************************************************************************************
-- Techncically Not Instantiable

CREATE OR REPLACE TYPE &&INSTALL_SCHEMA..ST_MULTISURFACE
UNDER &&INSTALL_SCHEMA..ST_GEOMCOLLECTION (
  CONSTRUCTOR FUNCTION ST_MULTISURFACE(asurfacearray mdsys.ST_SURFACE_ARRAY, asrid INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  OVERRIDING MEMBER FUNCTION ST_Dimension RETURN Integer DETERMINISTIC,
  MEMBER FUNCTION ST_PointOnSurface       RETURN &&INSTALL_SCHEMA..ST_Point DETERMINISTIC,
  MEMBER FUNCTION ST_Area                 RETURN NUMBER DETERMINISTIC
) NOT FINAL;
/
show errors

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_MULTISURFACE TO PUBLIC;

-- *********************************************************************************************

CREATE OR REPLACE TYPE &&INSTALL_SCHEMA..ST_MultiPolygon
UNDER &&INSTALL_SCHEMA..ST_MULTISURFACE (
  CONSTRUCTOR FUNCTION ST_MultiPolygon(apolygonarray MDSYS.ST_POLYGON_ARRAY, asrid INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_MultiPolygon(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_MultiPolygon(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION ST_MultiPolygon(AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT,
  STATIC FUNCTION ST_MPolyFromText(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MultiPolygon DETERMINISTIC,
  STATIC FUNCTION ST_MPolyFromText(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MultiPolygon DETERMINISTIC,
  STATIC FUNCTION ST_MPolyFromWKB (AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MultiPolygon DETERMINISTIC,
  STATIC FUNCTION ST_BdMPolyFromText(awkt   CLOB, asrid INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MultiPolygon DETERMINISTIC,
  STATIC FUNCTION ST_BdMPolyFromWKB (awkb   BLOB, asrid INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MULTIPOLYGON DETERMINISTIC
);
/
show errors

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_MultiPolygon TO PUBLIC;

-- ***************************************************************************************
-- Methods that can only be added after hierarchy is created
-- ***************************************************************************************

-- Missing SQLMM
-- ALTER TYPE &&INSTALL_SCHEMA..ST_GEOMETRY 
  -- ADD MEMBER FUNCTION ST_ToPoint() RETURN &&INSTALL_SCHEMA..ST_Point DETERMINISTIC,
  -- ADD MEMBER FUNCTION ST_ToLineString() RETURN &&INSTALL_SCHEMA..ST_LineString DETERMINISTIC,
  -- ADD MEMBER FUNCTION ST_ToCircular() RETURN &&INSTALL_SCHEMA..ST_CircularString DETERMINISTIC,
  -- ADD MEMBER FUNCTION ST_ToCompound() RETURN &&INSTALL_SCHEMA..ST_CompoundCurve DETERMINISTIC,
  -- ADD MEMBER FUNCTION ST_ToCurvePoly() RETURN &&INSTALL_SCHEMA..ST_CurvePolygon DETERMINISTIC,
  -- ADD MEMBER FUNCTION ST_ToPolygon() RETURN &&INSTALL_SCHEMA..ST_Polygon DETERMINISTIC,
  -- ADD MEMBER FUNCTION ST_ToGeomColl() RETURN &&INSTALL_SCHEMA..ST_GeomCollection DETERMINISTIC,
  -- ADD MEMBER FUNCTION ST_ToMultiPoint() RETURN &&INSTALL_SCHEMA..ST_MultiPoint DETERMINISTIC,
  -- ADD MEMBER FUNCTION ST_ToMultiCurve() RETURN &&INSTALL_SCHEMA..ST_MultiCurve DETERMINISTIC,
  -- ADD MEMBER FUNCTION ST_ToMultiLine() RETURN &&INSTALL_SCHEMA..ST_MultiLineString DETERMINISTIC,
  -- ADD MEMBER FUNCTION ST_ToMultiSurface() RETURN &&INSTALL_SCHEMA..ST_MultiSurface DETERMINISTIC,
  -- ADD MEMBER FUNCTION ST_ToMultiPolygon() RETURN &&INSTALL_SCHEMA..ST_MultiPolygon DETERMINISTIC
  -- CASCADE;
  

-- ***************************************************************************************
-- BODIES
-- ***************************************************************************************

CREATE OR REPLACE 
TYPE BODY &&INSTALL_SCHEMA..ST_GEOMETRY
AS
  MEMBER FUNCTION ST_Dimension RETURN Integer As Begin RETURN MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_Dimension(); End ST_Dimension;
  MEMBER FUNCTION ST_CoordDim RETURN SMALLINT AS Begin Return MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_CoordDim(); END;
  MEMBER FUNCTION ST_GeometryType RETURN VARCHAR2 AS Begin Return MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_GeometryType(); END;
  MEMBER FUNCTION ST_SRID RETURN INTEGER AS BEGIN RETURN MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_SRID(); END;
  MEMBER FUNCTION ST_SRID(asrid INTEGER) RETURN &&INSTALL_SCHEMA..ST_Geometry AS Begin RETURN &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_SRID(asrid).GEOM); END;
  MEMBER FUNCTION ST_Transform (asrid INTEGER) RETURN &&INSTALL_SCHEMA..ST_Geometry AS Begin Return &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.sdo_cs.transform(SELF.GEOM,asrid)); END;
  MEMBER FUNCTION ST_ISEMPTY RETURN INTEGER AS BEGIN RETURN MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_ISEMPTY(); END;
  MEMBER FUNCTION ST_IsSimple RETURN Integer AS Begin Return MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_IsSimple(); END;
  MEMBER FUNCTION ST_ISVALID RETURN INTEGER AS BEGIN RETURN MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_ISVALID(); END;  
  MEMBER FUNCTION ST_is3D RETURN INTEGER AS Begin 
     Return case when (SELF.GEOM.get_dims() = 3 and SELF.GEOM.get_lrs_dim() = 0 ) OR SELF.Geom.get_dims() = 4 
                 then 1
                 else 0
             end; 
  END;
  MEMBER FUNCTION ST_isMeasured RETURN INTEGER AS Begin Return case when SELF.GEOM.GET_LRS_DIM()<>0 then 1 else 0 end; END;
  -- MEMBER FUNCTION ST_LocateAlong (measure number) RETURN &&INSTALL_SCHEMA..ST_Geometry AS Begin Return MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).; END;
  -- MEMBER FUNCTION ST_LocateBetween (start_measure number,end_measure) RETURN &&INSTALL_SCHEMA..ST_Geometry AS Begin Return MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).; END;
  MEMBER FUNCTION ST_BOUNDARY RETURN &&INSTALL_SCHEMA..ST_GEOMETRY AS BEGIN RETURN &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_BOUNDARY().GEOM); END;
  MEMBER FUNCTION ST_ENVELOPE RETURN &&INSTALL_SCHEMA..ST_GEOMETRY AS BEGIN RETURN &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_ENVELOPE().GEOM); END;
  MEMBER FUNCTION ST_CONVEXHULL RETURN &&INSTALL_SCHEMA..ST_GEOMETRY AS BEGIN RETURN &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_CONVEXHULL().GEOM); END;
  MEMBER FUNCTION ST_Buffer(adistance NUMBER, aunit varchar2 default NULL) RETURN &&INSTALL_SCHEMA..ST_Geometry AS Begin 
     RETURN case when aunit is null 
                 then &&INSTALL_SCHEMA..ST_GEOMETRY(mdsys.sdo_geom.sdo_buffer(self.geom,adistance,MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_GetTolerance()))
                 else &&INSTALL_SCHEMA..ST_GEOMETRY(mdsys.sdo_geom.sdo_buffer(self.geom,adistance,MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_GetTolerance(),aunit))
              end; 
  END;
  MEMBER FUNCTION ST_Intersection(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN &&INSTALL_SCHEMA..ST_Geometry AS Begin RETURN &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_Intersection(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(ageometry.GEOM)).GEOM);END;
  MEMBER FUNCTION ST_UNION(AGEOMETRY &&INSTALL_SCHEMA..ST_GEOMETRY) RETURN &&INSTALL_SCHEMA..ST_GEOMETRY AS BEGIN RETURN &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_UNION(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(ageometry.GEOM)).GEOM);END;
  MEMBER FUNCTION ST_Difference(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN &&INSTALL_SCHEMA..ST_Geometry AS Begin RETURN &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_Difference(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(ageometry.GEOM)).GEOM);END;
  MEMBER FUNCTION ST_SYMMETRICDIFFERENCE(AGEOMETRY &&INSTALL_SCHEMA..ST_GEOMETRY) RETURN &&INSTALL_SCHEMA..ST_GEOMETRY AS BEGIN RETURN &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_SYMMETRICDIFFERENCE(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(ageometry.GEOM)).GEOM);END;
  MEMBER FUNCTION ST_SYMDIFFERENCE(AGEOMETRY &&INSTALL_SCHEMA..ST_GEOMETRY) RETURN &&INSTALL_SCHEMA..ST_GEOMETRY AS BEGIN RETURN &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_SYMDIFFERENCE(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(AGEOMETRY.GEOM)).GEOM);END;
  MEMBER FUNCTION ST_DISTANCE(AGEOMETRY &&INSTALL_SCHEMA..ST_GEOMETRY) RETURN NUMBER AS BEGIN RETURN MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_DISTANCE(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(AGEOMETRY.GEOM)); END;
  MEMBER FUNCTION ST_EQUALS(AGEOMETRY &&INSTALL_SCHEMA..ST_GEOMETRY) RETURN INTEGER AS BEGIN RETURN MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_EQUALS(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(AGEOMETRY.GEOM)); END;
  MEMBER FUNCTION ST_RELATE(AGEOMETRY &&INSTALL_SCHEMA..ST_GEOMETRY, PATTERNMATRIX VARCHAR2) RETURN INTEGER AS BEGIN RETURN MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_RELATE(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(AGEOMETRY.GEOM),PATTERNMATRIX); END;
  MEMBER FUNCTION ST_DISJOINT(AGEOMETRY &&INSTALL_SCHEMA..ST_GEOMETRY) RETURN INTEGER AS BEGIN RETURN MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_DISJOINT(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(AGEOMETRY.GEOM)); END;
  MEMBER FUNCTION ST_INTERSECTS(AGEOMETRY &&INSTALL_SCHEMA..ST_GEOMETRY) RETURN INTEGER AS BEGIN RETURN MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_INTERSECTS(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(AGEOMETRY.GEOM)); END;
  MEMBER FUNCTION ST_Touch(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN Integer AS Begin Return MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_Touch(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(ageometry.GEOM)); END;
  MEMBER FUNCTION ST_TOUCHES(AGEOMETRY &&INSTALL_SCHEMA..ST_GEOMETRY) RETURN INTEGER AS BEGIN RETURN MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_TOUCHES(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(AGEOMETRY.GEOM)); END;
  MEMBER FUNCTION ST_CROSS(AGEOMETRY &&INSTALL_SCHEMA..ST_GEOMETRY) RETURN INTEGER AS BEGIN RETURN MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_CROSS(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(AGEOMETRY.GEOM)); END;
  MEMBER FUNCTION ST_CROSSES(AGEOMETRY &&INSTALL_SCHEMA..ST_GEOMETRY) RETURN INTEGER AS BEGIN RETURN MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_CROSSES(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(AGEOMETRY.GEOM)); END;
  MEMBER FUNCTION ST_Within(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN Integer AS Begin Return MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_Within(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(ageometry.GEOM)); END;
  MEMBER FUNCTION ST_CONTAINS(AGEOMETRY &&INSTALL_SCHEMA..ST_GEOMETRY) RETURN INTEGER AS BEGIN RETURN MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_CONTAINS(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(AGEOMETRY.GEOM)); END;
  MEMBER FUNCTION ST_OVERLAP(AGEOMETRY &&INSTALL_SCHEMA..ST_GEOMETRY) RETURN INTEGER AS BEGIN RETURN MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_OVERLAP(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(AGEOMETRY.GEOM)); END;
  MEMBER FUNCTION ST_Overlaps(ageometry &&INSTALL_SCHEMA..ST_Geometry) RETURN Integer AS Begin Return MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_Overlap(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(ageometry.GEOM)); END;
  -- SQLMM only in ST_Surface type .....
  MEMBER FUNCTION ST_Centroid RETURN &&INSTALL_SCHEMA..ST_Geometry AS Begin RETURN &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_Centroid().GEOM); END;
  -- Converters
  STATIC FUNCTION ST_WKTToSQL(awkt CLOB, asrid INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_Geometry AS Begin 
     RETURN CASE WHEN ASRID IS NULL
                 THEN &&INSTALL_SCHEMA..ST_Geometry(MDSYS.ST_GEOMETRY.FROM_WKT(AWKT).geom)
                 ELSE &&INSTALL_SCHEMA..ST_Geometry(MDSYS.ST_GEOMETRY.FROM_WKT(AWKT,ASRID).geom)
             END;
  END;
  STATIC FUNCTION ST_WKTToSQL(Awkt VARCHAR2, asrid INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_GEOMETRY AS BEGIN 
     RETURN CASE WHEN ASRID IS NULL 
                 THEN &&INSTALL_SCHEMA..ST_Geometry(MDSYS.ST_GEOMETRY.FROM_WKT(AWKT).geom)
                 ELSE &&INSTALL_SCHEMA..ST_Geometry(MDSYS.ST_GEOMETRY.FROM_WKT(AWKT,ASRID).geom)
             END;
  END;
  STATIC FUNCTION ST_GeomFromText(awkt CLOB, asrid INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_Geometry AS Begin 
     RETURN CASE WHEN ASRID IS NULL 
                 THEN &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.ST_GEOMETRY.From_Wkt(awkt).GEOM)
                 ELSE &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.ST_GEOMETRY.From_Wkt(awkt,asrid).GEOM)
             END;
  END;
  STATIC FUNCTION ST_GeomFromText(Awkt VARCHAR2, asrid INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_Geometry AS Begin 
     RETURN CASE WHEN ASRID IS NULL 
                 THEN &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.ST_GEOMETRY.From_Wkt(awkt).GEOM)
                 ELSE &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.ST_GEOMETRY.From_Wkt(awkt,asrid).GEOM)
             END;
  END;
  STATIC FUNCTION ST_WKBToSQL(awkb BLOB, asrid INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_Geometry AS Begin 
     RETURN CASE WHEN ASRID IS NULL 
                 THEN &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.ST_GEOMETRY.FROM_WKB(awkb).GEOM)
                 ELSE &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.ST_GEOMETRY.FROM_WKB(awkb,asrid).GEOM)
             END;
  END;
  STATIC FUNCTION ST_GeomFromWKB(awkb BLOB, asrid INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_Geometry AS Begin 
     RETURN CASE WHEN ASRID IS NULL 
                 THEN &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.ST_GEOMETRY.FROM_WKB(awkb).GEOM)
                 ELSE &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.ST_GEOMETRY.FROM_WKB(awkb,asrid).GEOM)
             END;
  END;

  MEMBER FUNCTION ST_ASTEXT   RETURN CLOB AS BEGIN RETURN MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).GET_WKT(); END;
  MEMBER FUNCTION ST_AsBinary RETURN BLOB AS Begin Return MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).GET_WKB(); END;

  -- Non-standard methods
  STATIC FUNCTION ST_FROM_SDO_GEOM(AGEOMETRY MDSYS.SDO_GEOMETRY) RETURN &&INSTALL_SCHEMA..ST_GEOMETRY AS BEGIN RETURN &&INSTALL_SCHEMA..ST_GEOMETRY(MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(AGEOMETRY).GEOM); END;
  MEMBER FUNCTION ST_GET_SDO_GEOM RETURN MDSYS.SDO_GEOMETRY AS Begin Return SELF.GEOM; END;
  MEMBER FUNCTION ST_GetTolerance RETURN NUMBER As Begin Return MDSYS.ST_GEOMETRY.FROM_SDO_GEOM(SELF.GEOM).ST_GetTolerance(); END;

  Member Function ST_Geom2Grid(p_TileX  In Number,
                               p_TileY  In Number)
  Return &&INSTALL_SCHEMA..ST_GridCell_Array Pipelined
  Is
    v_loCol     PLS_Integer;
    v_hiCol     PLS_Integer;
    v_loRow     PLS_Integer;
    v_hiRow     PLS_Integer;
    v_point     &&INSTALL_SCHEMA..ST_Point;
    v_envelope  &&INSTALL_SCHEMA..ST_LineString;
  Begin
    IF ( SELF.geom is null ) THEN
      RETURN;
    END IF;
    IF ( SELF.ST_GeometryType() = 'ST_POINT' ) THEN
        v_point := TREAT(SELF as &&INSTALL_SCHEMA..ST_Point);
        PIPE ROW (&&INSTALL_SCHEMA..ST_GridCell(1,1,
                  &&INSTALL_SCHEMA..ST_POLYGON(v_point.ST_X() - (p_TileX / 2.0),
                                  v_point.ST_Y() - (p_TileY / 2.0),
                                  v_point.ST_X() + (p_TileX / 2.0),
                                  v_point.ST_Y() + (p_TileY / 2.0),
                                  SELF.ST_SRID()).geom));
    ELSE
        v_envelope := &&INSTALL_SCHEMA..ST_Polygon(SELF.ST_Envelope().ST_AsText()).ST_ExteriorRing();
        v_loCol    := TRUNC(v_envelope.ST_PointN(1).ST_X() / p_TileX);
        v_hiCol    := CEIL( v_envelope.ST_PointN(3).ST_X() / p_TileX) - 1;
        v_loRow    := TRUNC(v_envelope.ST_PointN(1).ST_Y() / p_TileY);
        v_hiRow    := CEIL( v_envelope.ST_PointN(3).ST_Y() / p_TileY) - 1;
        <<column_interator>>
        For v_col in v_loCol..v_hiCol Loop
          <<row_iterator>>
          For v_row in v_loRow..v_hiRow Loop
             PIPE ROW (&&INSTALL_SCHEMA..ST_GridCell(v_col, v_row,
                       &&INSTALL_SCHEMA..ST_POLYGON((v_col * p_TileX),            (v_row * p_TileY),
                                      ((v_col * p_TileX) + p_TileX),((v_row * p_TileY) + p_TileY),
                                      SELF.ST_SRID()).geom));
    
          End Loop row_iterator;
        End Loop col_iterator;
    END IF;
    RETURN;
  End ST_Geom2Grid;
  
END;
/
show errors

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_GEOMETRY TO PUBLIC;

-- *******************************************************

create or replace TYPE BODY &&INSTALL_SCHEMA..ST_POINT
AS
  CONSTRUCTOR FUNCTION ST_POINT(XCOORD DOUBLE PRECISION, YCOORD DOUBLE PRECISION, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := CASE WHEN (ASRID IS NULL) 
                       THEN MDSYS.ST_POINT(XCOORD,YCOORD).GEOM
                       ELSE MDSYS.ST_POINT(XCOORD,YCOORD,ASRID).GEOM
                   END;
     RETURN; 
  END; 
  CONSTRUCTOR FUNCTION ST_Point(xcoord DOUBLE PRECISION, ycoord DOUBLE PRECISION, zcoord DOUBLE PRECISION, asrid INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := SDO_GEOMETRY(3001,ASRID,SDO_POINT_TYPE(xcoord,ycoord,zcoord),NULL,NULL);
     RETURN; 
  END; 
  CONSTRUCTOR FUNCTION ST_Point(xcoord DOUBLE PRECISION, ycoord DOUBLE PRECISION, zcoord DOUBLE PRECISION, mcoord DOUBLE PRECISION, asrid INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := SDO_GEOMETRY(4401,ASRID,NULL,SDO_ELEM_INFO_ARRAY(1,1,1),SDO_ORDINATE_ARRAY(xcoord,ycoord,zcoord,mcoord));
     RETURN; 
  END; 
  CONSTRUCTOR FUNCTION ST_Point(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
    SELF.GEOM := TREAT(case when ASRID is null 
                            then &&INSTALL_SCHEMA..ST_POINT(MDSYS.ST_POINT.FROM_WKT(AWKT).GEOM)
                            else &&INSTALL_SCHEMA..ST_POINT(MDSYS.ST_POINT.FROM_WKT(AWKT,ASRID).GEOM)
                        end AS &&INSTALL_SCHEMA..ST_Point).GEOM; 
    IF ( SELF.GEOM.GET_GTYPE() <> 1 ) THEN
       raise_application_error(-20120,'Result is not ST_POINT',true);
    END IF;
    RETURN;
  END;
  CONSTRUCTOR FUNCTION ST_Point(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
    SELF.GEOM := TREAT(case when ASRID is null 
                            then &&INSTALL_SCHEMA..ST_POINT(MDSYS.ST_POINT.FROM_WKT(AWKT).GEOM)
                            else &&INSTALL_SCHEMA..ST_POINT(MDSYS.ST_POINT.FROM_WKT(AWKT,ASRID).GEOM)
                        end AS &&INSTALL_SCHEMA..ST_Point).GEOM; 
    IF ( SELF.GEOM.GET_GTYPE() <> 1 ) THEN
       raise_application_error(-20120,'Result is not ST_POINT',true);
    END IF;
    RETURN;
  END;
  CONSTRUCTOR FUNCTION ST_Point (AWKB BLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
    SELF.GEOM := TREAT(case when ASRID is null 
                            then &&INSTALL_SCHEMA..ST_POINT(MDSYS.ST_POINT.FROM_WKB(AWKB).GEOM)
                            else &&INSTALL_SCHEMA..ST_POINT(MDSYS.ST_POINT.FROM_WKB(AWKB,ASRID).GEOM)
                        end AS &&INSTALL_SCHEMA..ST_Point).GEOM; 
    IF ( SELF.GEOM.GET_GTYPE() <> 1 ) THEN
       raise_application_error(-20120,'Result is not ST_POINT',true);
    END IF;
    RETURN;
  END;
  OVERRIDING MEMBER FUNCTION ST_DIMENSION       RETURN INTEGER            AS BEGIN RETURN MDSYS.ST_POINT(SELF.ST_X(),SELF.ST_Y()).ST_DIMENSION(); END; 
  MEMBER FUNCTION ST_X RETURN DOUBLE PRECISION                            AS BEGIN RETURN MDSYS.ST_POINT(SELF.GEOM).ST_X(); END; 
  MEMBER FUNCTION ST_X(XCOORD DOUBLE PRECISION) RETURN &&INSTALL_SCHEMA..ST_POINT      AS BEGIN RETURN &&INSTALL_SCHEMA..ST_POINT(MDSYS.ST_POINT(SELF.GEOM).ST_X(XCOORD).GEOM); END;
  MEMBER FUNCTION ST_Y RETURN DOUBLE PRECISION                            AS BEGIN RETURN MDSYS.ST_POINT(SELF.GEOM).ST_Y(); END; 
  MEMBER FUNCTION ST_Y(YCOORD DOUBLE PRECISION) RETURN &&INSTALL_SCHEMA..ST_POINT      AS BEGIN RETURN &&INSTALL_SCHEMA..ST_POINT(MDSYS.ST_POINT(SELF.GEOM).ST_Y(YCOORD).GEOM); END;
  MEMBER FUNCTION ST_Z RETURN DOUBLE PRECISION
  AS 
     v_vertices mdsys.vertex_set_type;
  BEGIN 
     IF ( SELF.ST_IsEmpty()=1 or SELF.ST_CoordDim()=2 OR (SELF.ST_CoordDim()=3 And SELF.GEOM.Get_Lrs_Dim()=3) ) THEN
       RETURN NULL; -- Nothing to be done
     END IF;
     v_vertices := mdsys.sdo_util.getVertices(SELF.GEOM);
     IF ( v_vertices is not null and v_vertices.COUNT >= 1 ) THEN
       RETURN CASE SELF.GEOM.Get_Lrs_Dim() 
              WHEN 0 THEN v_vertices(1).z
              WHEN 3 THEN v_vertices(1).w  -- Can we really say 4th spot is Z?
              WHEN 4 THEN v_vertices(1).z
              ELSE NULL 
          END;
     ELSE
       RETURN NULL;
     END IF;
  END; 
  MEMBER FUNCTION ST_Z(ZCOORD DOUBLE PRECISION) RETURN &&INSTALL_SCHEMA..ST_POINT
  AS 
  BEGIN 
    IF (  SELF.ST_IsEmpty()=1 
      OR  SELF.ST_CoordDim() = 2 
      OR (SELF.ST_CoordDim() = 3 AND SELF.GEOM.Get_Lrs_Dim() = 3) ) THEN
       RETURN &&INSTALL_SCHEMA..ST_POINT(SELF.GEOM); -- Nothing to be done
    ELSE 
       RETURN CASE WHEN SELF.ST_CoordDim() = 3 AND SELF.GEOM.Get_Lrs_Dim() = 0 
                   THEN &&INSTALL_SCHEMA..ST_Point(SELF.ST_X(),SELF.ST_Y(),ZCOORD,asrid=>SELF.ST_Srid())
                   WHEN SELF.ST_CoordDim() = 4 AND SELF.GEOM.Get_Lrs_Dim() IN (0,4)
                   THEN &&INSTALL_SCHEMA..ST_Point(SELF.ST_X(),SELF.ST_Y(),ZCOORD,SELF.ST_M(),asrid=>SELF.ST_Srid())
                   WHEN SELF.ST_CoordDim() = 4 AND SELF.GEOM.Get_Lrs_Dim() = 3 
                   THEN &&INSTALL_SCHEMA..ST_Point(SELF.ST_X(),SELF.ST_Y(),SELF.ST_M(),ZCOORD,asrid=>SELF.ST_Srid())  -- Can we say 4th spot is Z?
                   ELSE &&INSTALL_SCHEMA..ST_POINT(SELF.GEOM) -- Nothing to be done
               END;
    END IF;
  END;
  MEMBER FUNCTION ST_M RETURN DOUBLE PRECISION
  AS 
     v_vertices mdsys.vertex_set_type;
  BEGIN 
     IF ( SELF.ST_IsEmpty()=1 or SELF.ST_CoordDim()=2 OR (SELF.ST_CoordDim()=3 And SELF.GEOM.Get_Lrs_Dim()=0) ) THEN
       RETURN NULL; -- Nothing to be done
     END IF;
     v_vertices := mdsys.sdo_util.getVertices(SELF.GEOM);
     IF ( v_vertices is not null and v_vertices.COUNT >= 1 ) THEN
       RETURN CASE SELF.GEOM.Get_Lrs_Dim() 
              WHEN 0 THEN v_vertices(1).w
              WHEN 3 THEN v_vertices(1).z
              WHEN 4 THEN v_vertices(1).w
              ELSE NULL 
          END;
     ELSE
       RETURN NULL;
     END IF;
  END;
  MEMBER FUNCTION ST_M(MCOORD DOUBLE PRECISION) RETURN &&INSTALL_SCHEMA..ST_POINT
  AS 
  BEGIN 
    IF ( SELF.ST_IsEmpty()=1 OR SELF.GEOM.Get_Lrs_Dim() = 0 ) THEN
       RETURN &&INSTALL_SCHEMA..ST_POINT(SELF.GEOM); -- Nothing to be done
    ELSE 
       RETURN CASE WHEN SELF.GEOM.Get_Lrs_Dim() = 3
                   THEN &&INSTALL_SCHEMA..ST_Point(SELF.ST_X(),SELF.ST_Y(),MCOORD,asrid=>SELF.ST_Srid())
                   ELSE &&INSTALL_SCHEMA..ST_Point(SELF.ST_X(),SELF.ST_Y(),SELF.ST_Z(),MCOORD,asrid=>SELF.ST_Srid())
               END;
    END IF;
  END;
  
  MEMBER FUNCTION ST_EXPLICITPOINT RETURN MDSYS.ST_DOUBLE_PRECISION_ARRAY 
  AS 
    v_varray  MDSYS.ST_DOUBLE_PRECISION_ARRAY;
    v_z       NUMBER;
    v_m       NUMBER;
  Begin
    IF ( SELF.ST_IsEmpty()=1 ) THEN
       RETURN NULL;
    END IF;
    v_z := SELF.ST_Z();
    v_m := SELF.ST_M();
    CASE
    WHEN ((v_z IS NOT NULL AND
           v_m IS NOT NULL) OR 
           SELF.ST_CoordDim()=4 ) THEN
       v_varray := MDSYS.ST_DOUBLE_PRECISION_ARRAY(SELF.ST_X(), SELF.ST_Y(), v_z, v_m);
    WHEN (v_z IS NOT NULL AND
          v_m IS NULL) THEN
        v_varray := MDSYS.ST_DOUBLE_PRECISION_ARRAY(SELF.ST_X(), SELF.ST_Y(), v_z);
    WHEN (v_z IS NULL AND
          v_m IS NOT NULL) THEN
        v_varray := MDSYS.ST_DOUBLE_PRECISION_ARRAY(SELF.ST_X(), SELF.ST_Y(), v_m);
    ELSE
        v_varray := MDSYS.ST_DOUBLE_PRECISION_ARRAY(SELF.ST_X(), SELF.ST_Y());
    END CASE;
    Return v_varray;
  End ST_ExplicitPoint;
  
  STATIC FUNCTION ST_PointFromText(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_POINT AS BEGIN RETURN &&INSTALL_SCHEMA..ST_POINT(AWKT,ASRID); END;
  STATIC FUNCTION ST_PointFromText(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_POINT AS BEGIN RETURN &&INSTALL_SCHEMA..ST_POINT(AWKT,ASRID); END;
  STATIC FUNCTION ST_PointFromWKB (AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_POINT AS BEGIN RETURN &&INSTALL_SCHEMA..ST_POINT(AWKB,ASRID); END;

end;
/
SHOW ERRORS

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_POINT TO PUBLIC;

-- *********************************************************************************************

CREATE OR REPLACE
TYPE BODY &&INSTALL_SCHEMA..ST_CURVE
AS
  OVERRIDING MEMBER FUNCTION ST_DIMENSION RETURN INTEGER AS BEGIN              RETURN MDSYS.ST_CURVE(SELF.GEOM).ST_DIMENSION(); END; 
  MEMBER FUNCTION ST_POINTS               RETURN MDSYS.ST_POINT_ARRAY AS BEGIN RETURN MDSYS.ST_CURVE(SELF.GEOM).ST_POINTS(); END;
  MEMBER FUNCTION ST_NUMPOINTS            RETURN INTEGER AS BEGIN              RETURN mdsys.sdo_util.getNumVertices(SELF.GEOM); END;
  MEMBER FUNCTION ST_POINTN(APOSITION INTEGER) RETURN &&INSTALL_SCHEMA..ST_POINT AS BEGIN   RETURN &&INSTALL_SCHEMA..ST_POINT(MDSYS.ST_CURVE(SELF.GEOM).ST_POINTN(APOSITION).GEOM); END;
  MEMBER FUNCTION ST_ISCLOSED             RETURN INTEGER AS BEGIN              RETURN MDSYS.ST_CURVE(SELF.GEOM).ST_ISCLOSED(); END;
  MEMBER FUNCTION ST_MIDPOINTREP          RETURN MDSYS.ST_POINT_ARRAY AS BEGIN RETURN MDSYS.ST_CURVE(SELF.GEOM).ST_MIDPOINTREP(); END;
  MEMBER FUNCTION ST_STARTPOINT           RETURN &&INSTALL_SCHEMA..ST_POINT AS BEGIN        RETURN &&INSTALL_SCHEMA..ST_POINT(MDSYS.ST_CURVE(SELF.GEOM).ST_STARTPOINT().GEOM); END;
  MEMBER FUNCTION ST_ENDPOINT             RETURN &&INSTALL_SCHEMA..ST_POINT AS BEGIN        RETURN &&INSTALL_SCHEMA..ST_POINT(MDSYS.ST_CURVE(SELF.GEOM).ST_ENDPOINT().GEOM); END;
  OVERRIDING MEMBER FUNCTION ST_ISSIMPLE  RETURN INTEGER AS BEGIN              RETURN MDSYS.ST_CURVE(SELF.GEOM).ST_ISSIMPLE(); END;
  MEMBER FUNCTION ST_ISRING               RETURN INTEGER AS BEGIN              RETURN MDSYS.ST_CURVE(SELF.GEOM).ST_ISRING(); END;
  MEMBER FUNCTION ST_LENGTH               RETURN NUMBER  AS BEGIN              RETURN MDSYS.ST_CURVE(SELF.GEOM).ST_LENGTH(); END;
end;
/
SHOW ERRORS

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_CURVE TO PUBLIC;

-- *******************************************************

CREATE OR REPLACE TYPE BODY &&INSTALL_SCHEMA..ST_LINESTRING
AS
  CONSTRUCTOR FUNCTION ST_LINESTRING(APOINTARRAY MDSYS.ST_POINT_ARRAY, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
    SELF.GEOM := CASE WHEN (ASRID is null) 
                      THEN MDSYS.ST_LINESTRING(APOINTARRAY).GEOM
                      ELSE MDSYS.ST_LINESTRING(APOINTARRAY,ASRID).GEOM
                  END;
    RETURN;
  END;
  CONSTRUCTOR FUNCTION ST_LINESTRING(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_LINESTRING(MDSYS.ST_LINESTRING.FROM_WKT(AWKT).GEOM)
                             else &&INSTALL_SCHEMA..ST_LINESTRING(MDSYS.ST_LINESTRING.FROM_WKT(AWKT,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_LINESTRING).GEOM;
     IF NOT ( SELF.GEOM IS NOT NULL
          AND SELF.GEOM.GET_GTYPE() = 2 
          AND SELF.GEOM.SDO_ELEM_INFO IS NOT NULL 
          AND SELF.GEOM.SDO_ELEM_INFO(2)=2
          AND SELF.GEOM.SDO_ELEM_INFO(3)=1 ) THEN
       raise_application_error(-20120,'Result is not ST_LineString',true);
     END IF;
     RETURN;
  END;
  CONSTRUCTOR FUNCTION ST_LINESTRING(AWKT CLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_LINESTRING(MDSYS.ST_LINESTRING.FROM_WKT(AWKT).GEOM)
                             else &&INSTALL_SCHEMA..ST_LINESTRING(MDSYS.ST_LINESTRING.FROM_WKT(AWKT,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_LINESTRING).GEOM;
     IF NOT ( SELF.GEOM IS NOT NULL
          AND SELF.GEOM.GET_GTYPE() = 2 
          AND SELF.GEOM.SDO_ELEM_INFO IS NOT NULL 
          AND SELF.GEOM.SDO_ELEM_INFO(2)=2
          AND SELF.GEOM.SDO_ELEM_INFO(3)=1 ) THEN
       raise_application_error(-20120,'Result is not ST_LineString',true);
     END IF;
     RETURN;
  END;
  CONSTRUCTOR FUNCTION ST_LINESTRING(AWKB BLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_LINESTRING(MDSYS.ST_LINESTRING.FROM_WKB(AWKB).GEOM)
                             else &&INSTALL_SCHEMA..ST_LINESTRING(MDSYS.ST_LINESTRING.FROM_WKB(AWKB,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_LINESTRING).GEOM;
     IF NOT ( SELF.GEOM IS NOT NULL
          AND SELF.GEOM.GET_GTYPE() = 2 
          AND SELF.GEOM.SDO_ELEM_INFO IS NOT NULL 
          AND SELF.GEOM.SDO_ELEM_INFO(2)=2
          AND SELF.GEOM.SDO_ELEM_INFO(3)=1 ) THEN
       raise_application_error(-20120,'Result is not ST_LineString',true);
     END IF;
     RETURN;
  END;

  OVERRIDING MEMBER FUNCTION ST_ISSIMPLE RETURN INTEGER 
  AS BEGIN RETURN MDSYS.ST_LINESTRING(SELF.GEOM).ST_ISSIMPLE(); END;
  MEMBER FUNCTION ST_POINTS(APOINTARRAY MDSYS.ST_POINT_ARRAY) RETURN &&INSTALL_SCHEMA..ST_LINESTRING 
  AS BEGIN RETURN &&INSTALL_SCHEMA..ST_LINESTRING(MDSYS.ST_LINESTRING(SELF.GEOM).ST_POINTS(APOINTARRAY).GEOM); END;

  STATIC FUNCTION ST_LineFromText(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_LINESTRING AS BEGIN RETURN &&INSTALL_SCHEMA..ST_LINESTRING(AWKT,ASRID); END;
  STATIC FUNCTION ST_LineFromText(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_LINESTRING AS BEGIN RETURN &&INSTALL_SCHEMA..ST_LINESTRING(AWKT,ASRID); END;
  STATIC FUNCTION ST_LineFromWKB (AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_LINESTRING AS BEGIN RETURN &&INSTALL_SCHEMA..ST_LINESTRING(AWKB,ASRID); END;

END;
/
SHOW ERRORS

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_LINESTRING TO PUBLIC;

-- *******************************************************

CREATE OR REPLACE TYPE BODY &&INSTALL_SCHEMA..ST_CIRCULARSTRING
AS
  CONSTRUCTOR FUNCTION ST_CIRCULARSTRING(APOINTARRAY MDSYS.ST_POINT_ARRAY, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
    SELF.GEOM := CASE WHEN (ASRID IS NULL) 
                      THEN MDSYS.ST_CIRCULARSTRING(apointarray).geom
                      ELSE MDSYS.ST_CIRCULARSTRING(apointarray,asrid).geom
                  END;
    RETURN; 
  END;
  CONSTRUCTOR FUNCTION ST_CIRCULARSTRING(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_CIRCULARSTRING(MDSYS.ST_CIRCULARSTRING.FROM_WKT(AWKT).GEOM)
                             else &&INSTALL_SCHEMA..ST_CIRCULARSTRING(MDSYS.ST_CIRCULARSTRING.FROM_WKT(AWKT,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_CIRCULARSTRING).GEOM;
     If NOT ( SELF.GEOM IS NOT NULL 
          AND SELF.GEOM.GET_GTYPE() = 2 
          AND SELF.GEOM.SDO_ELEM_INFO is NOT null
          AND SELF.GEOM.SDO_ELEM_INFO(2) = 2 
          AND SELF.GEOM.SDO_ELEM_INFO(3) = 2 ) Then
       raise_application_error(-20120,'Result is not ST_CircularString',true);
     End If;
     RETURN;
  END;
  CONSTRUCTOR FUNCTION ST_CIRCULARSTRING(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_CIRCULARSTRING(MDSYS.ST_CIRCULARSTRING.FROM_WKT(AWKT).GEOM)
                             else &&INSTALL_SCHEMA..ST_CIRCULARSTRING(MDSYS.ST_CIRCULARSTRING.FROM_WKT(AWKT,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_CIRCULARSTRING).GEOM;
     If NOT ( SELF.GEOM IS NOT NULL 
          AND SELF.GEOM.GET_GTYPE() = 2 
          AND SELF.GEOM.SDO_ELEM_INFO is NOT null
          AND SELF.GEOM.SDO_ELEM_INFO(2) = 2 
          AND SELF.GEOM.SDO_ELEM_INFO(3) = 2 ) Then
       raise_application_error(-20120,'Result is not ST_CircularString',true);
     End If;
     RETURN;
  END;
  CONSTRUCTOR FUNCTION ST_CIRCULARSTRING(AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_CIRCULARSTRING(MDSYS.ST_CIRCULARSTRING.FROM_WKB(AWKB).GEOM)
                             else &&INSTALL_SCHEMA..ST_CIRCULARSTRING(MDSYS.ST_CIRCULARSTRING.FROM_WKB(AWKB,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_CIRCULARSTRING).GEOM;
     If NOT ( SELF.GEOM IS NOT NULL 
          AND SELF.GEOM.GET_GTYPE() = 2 
          AND SELF.GEOM.SDO_ELEM_INFO is NOT null
          AND SELF.GEOM.SDO_ELEM_INFO(2) = 2 
          AND SELF.GEOM.SDO_ELEM_INFO(3) = 2 ) Then
       raise_application_error(-20120,'Result is not ST_CircularString',true);
     End If;
     RETURN;
  END;
  STATIC FUNCTION ST_CircularFromTxt(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_CIRCULARSTRING AS BEGIN RETURN &&INSTALL_SCHEMA..ST_CIRCULARSTRING(AWKT,ASRID); END;
  STATIC FUNCTION ST_CircularFromTxt(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_CIRCULARSTRING AS BEGIN RETURN &&INSTALL_SCHEMA..ST_CIRCULARSTRING(AWKT,ASRID); END;
  STATIC FUNCTION ST_CircularFromWKB(AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_CIRCULARSTRING AS BEGIN RETURN &&INSTALL_SCHEMA..ST_CIRCULARSTRING(AWKB,ASRID); END;
  MEMBER FUNCTION ST_Points(apointarray MDSYS.ST_Point_Array) RETURN &&INSTALL_SCHEMA..ST_CircularString
  AS BEGIN RETURN &&INSTALL_SCHEMA..ST_CircularString(MDSYS.ST_CircularString(apointarray).GEOM); END;
END;
/
show errors

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_CIRCULARSTRING TO PUBLIC;

-- *******************************************************

CREATE OR REPLACE 
TYPE BODY &&INSTALL_SCHEMA..ST_COMPOUNDCURVE
as
  CONSTRUCTOR FUNCTION ST_COMPOUNDCURVE(ACURVE &&INSTALL_SCHEMA..ST_CURVE, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
    SELF.GEOM := CASE WHEN (ASRID IS NULL) 
                      THEN MDSYS.ST_COMPOUNDCURVE(MDSYS.ST_Curve(ACURVE.geom)).geom
                      ELSE MDSYS.ST_COMPOUNDCURVE(MDSYS.ST_Curve(ACURVE.geom),asrid).geom
                  END;
    RETURN; 
  END;
  CONSTRUCTOR FUNCTION ST_COMPOUNDCURVE(ACURVEARRAY MDSYS.ST_CURVE_ARRAY, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := CASE WHEN (ASRID IS NULL) 
                       THEN MDSYS.ST_COMPOUNDCURVE(acurvearray).geom
                       ELSE MDSYS.ST_COMPOUNDCURVE(acurvearray,asrid).geom
                   END;
     RETURN; 
  END;
  CONSTRUCTOR FUNCTION ST_COMPOUNDCURVE(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_COMPOUNDCURVE(MDSYS.ST_COMPOUNDCURVE.FROM_WKT(AWKT).GEOM)
                             else &&INSTALL_SCHEMA..ST_COMPOUNDCURVE(MDSYS.ST_COMPOUNDCURVE.FROM_WKT(AWKT,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_COMPOUNDCURVE).GEOM;
     If NOT ( SELF.GEOM IS NOT NULL 
          AND SELF.GEOM.GET_GTYPE() = 2 
          AND SELF.GEOM.SDO_ELEM_INFO is NOT null
          AND SELF.GEOM.SDO_ELEM_INFO(2) = 4 ) Then
       raise_application_error(-20120,'Result is not St_CompoundCurve',true);
     End If;
     RETURN;
  END;
  CONSTRUCTOR FUNCTION ST_COMPOUNDCURVE(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_COMPOUNDCURVE(MDSYS.ST_COMPOUNDCURVE.FROM_WKT(AWKT).GEOM)
                             else &&INSTALL_SCHEMA..ST_COMPOUNDCURVE(MDSYS.ST_COMPOUNDCURVE.FROM_WKT(AWKT,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_COMPOUNDCURVE).GEOM;
     If NOT ( SELF.GEOM IS NOT NULL 
          AND SELF.GEOM.GET_GTYPE() = 2 
          AND SELF.GEOM.SDO_ELEM_INFO is NOT null
          AND SELF.GEOM.SDO_ELEM_INFO(2) = 4 ) Then
       raise_application_error(-20120,'Result is not St_CompoundCurve',true);
     End If;
     RETURN;
  END;
  CONSTRUCTOR FUNCTION ST_COMPOUNDCURVE(AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_COMPOUNDCURVE(MDSYS.ST_COMPOUNDCURVE.FROM_WKB(AWKB).GEOM)
                             else &&INSTALL_SCHEMA..ST_COMPOUNDCURVE(MDSYS.ST_COMPOUNDCURVE.FROM_WKB(AWKB,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_COMPOUNDCURVE).GEOM;
     If NOT ( SELF.GEOM IS NOT NULL 
          AND SELF.GEOM.GET_GTYPE() = 2 
          AND SELF.GEOM.SDO_ELEM_INFO is NOT null
          AND SELF.GEOM.SDO_ELEM_INFO(2) = 4 ) Then
       raise_application_error(-20120,'Result is not St_CompoundCurve',true);
     End If;
     RETURN;
  END;

  MEMBER FUNCTION ST_Curves(acurvearray MDSYS.ST_Curve_Array) RETURN &&INSTALL_SCHEMA..ST_CompoundCurve AS BEGIN RETURN &&INSTALL_SCHEMA..ST_CompoundCurve(MDSYS.ST_COMPOUNDCURVE(SELF.GEOM).ST_Curves(acurvearray).geom); END;

  MEMBER FUNCTION ST_CURVES
  RETURN MDSYS.ST_CURVE_ARRAY
  AS 
     v_i               PLS_INTEGER := 0;
     v_count           PLS_INTEGER := 0;
     v_element         PLS_INTEGER := 0;
     v_Num_Elements    PLS_INTEGER := 0;
     v_subelement_geom mdsys.sdo_geometry;
     v_extract_geom    mdsys.sdo_geometry;
     v_ord_count       PLS_INTEGER := 0;
     v_ordinates       mdsys.sdo_ordinate_array;
     v_vertices        mdsys.vertex_set_type;
     v_curves          MDSYS.ST_CURVE_ARRAY := new MDSYS.ST_CURVE_ARRAY();

      Function copyOrdinates(p_ords  in mdsys.sdo_ordinate_array,
                             p_first in pls_integer,
                             p_last  in pls_integer)
      Return mdsys.sdo_ordinate_array
      As
         v_ords mdsys.sdo_ordinate_array := new mdsys.sdo_ordinate_array();
      Begin
         v_ords.extend((p_last-p_first)+1);
         for i in p_first .. p_last loop
            v_ords(i-p_first+1) := p_ords(i);
         end loop;
         return v_ords;
      End copyOrdinates;
      
  Begin
    IF ( SELF.ST_NumCurves() = 0 ) THEN
       -- ie single point geometry
       v_curves.EXTEND(1); v_curves(v_curves.COUNT) := mdsys.ST_CURVE(SELF.geom);
    ELSE 
       v_element := 0;
       v_Num_Elements := case when SELF.geom.Get_GType() in (2,3) then 1 else mdsys.sdo_util.getNumElem(SELF.geom) end;
       <<while_all_elements>>
       WHILE ( v_element < v_Num_Elements ) LOOP
         v_element := v_element + 1;
         -- DEBUG dbms_output.put_line('Extracting element ' || v_element || ' of ' || v_Num_Elements);
         -- Extract element with all sub-elements
         v_extract_geom := case when v_Num_Elements = 1
                                then SELF.GEOM
                                else mdsys.sdo_util.Extract(SELF.geom,v_element,0)
                            end;
         -- The rings of a polygon are subelements that Extract can handle.
         -- But if a ring is a compound object then Extract cannot handle it.
         -- We will leave the extraction of a ring as a whole polygon to ExtractPolygon
         -- Does user want to further break down geometry into its basic subElements?
         -- DEBUG dbms_output.put_line('ST_Curves()');
         v_ord_count := v_extract_geom.sdo_ordinates.COUNT;
         FOR rec IN (select rownum as id, f.interpretation,
                            case when f.arccount = 0 then first_ord else first_ord + (t.IntValue-1)*2*SELF.geom.Get_Dims()   end as start_ord,
                            case when f.arccount = 0 then end_ord   else first_ord + (t.IntValue*2*SELF.geom.Get_Dims()) + 2 end as end_ord,
                            t.IntValue as arcCounter
                       from (SELECT first_ord, end_ord, interpretation,
                                    (end_ord - first_ord)                as ordCount,
                                    (end_ord - first_ord)/SELF.geom.Get_Dims() as coordCount,
                                    case when interpretation = 2 
                                         then ((end_ord-first_ord)/SELF.geom.Get_Dims()-1)/2
                                         else 0
                                     end as arcCount
                               from (SELECT e.offset as first_ord, e.etype, e.interpretation,
                                            (case when (lead(e.offset,1) over (order by e.offset)) is not null
                                                  then (lead(e.offset,1) over (order by e.offset)) + SELF.geom.get_dims()
                                                  else v_ord_count + 1
                                              end) as end_ord
                                       FROM (SELECT offset, etype, interpretation
                                               FROM (SELECT case when mod(rownum,3)=1 then t.column_value else null end as offset,
                                                            case when mod(rownum,3)=1 then (lead(t.column_value,1) over (order by 1)) else null end as etype,
                                                            case when mod(rownum,3)=1 then (lead(t.column_value,2) over (order by 1)) else null end as interpretation
                                                       FROM TABLE(SELF.geom.sdo_elem_info) t
                                                     ) f
                                               WHERE f.offset is not null
                                            ) e 
                                      WHERE e.etype not in (4,1005,2005)
                                     ) b
                              ) f,
                              TABLE(&&INSTALL_SCHEMA..generate_series(1,(case when f.arcCount=0 then 1 else f.arcCount end),1)) t
                    ) 
         LOOP
           v_ordinates := mdsys.sdo_ordinate_array();
           -- DEBUG dbms_output.put_line('rec.id=' || rec.id ||' rec.start_ord=' || rec.start_ord || ' rec.end_ord-1=' || (rec.end_ord-1) || 'TotalOrds=' || (rec.end_ord-rec.start_ord));
           v_ordinates := copyOrdinates(v_extract_geom.sdo_ordinates,rec.start_ord,rec.end_ord-1);
           -- DEBUG dbms_output.put_line(' writing ' || case when rec.interpretation=2 then 'CircularArc' else 'VertexConnected' end);
           v_curves.EXTEND(1); v_curves(v_curves.COUNT) := mdsys.ST_CURVE(
                                    mdsys.sdo_geometry(2002,
                                                       SELF.geom.sdo_srid,
                                                       null,
                                                       mdsys.sdo_elem_info_array(1,2,rec.interpretation),
                                                       v_ordinates));
           v_ordinates := new mdsys.sdo_ordinate_array();
         END LOOP;
       END LOOP while_all_elements;
    END IF;
    RETURN v_curves;
  END;
  
  MEMBER FUNCTION ST_NumCurves 
         RETURN INTEGER 
  AS 
    -- sdo_elem_info triplet
    v_offset              pls_integer := 0;
    v_etype               pls_integer := 0;
    v_interpretation      pls_integer := 0;
    -- working variables
    v_elements            pls_integer := 0;
    v_sub_elem_count      pls_integer := 0;
    v_last_ord            pls_integer := 0;
    v_nCoords             pls_integer := 0;
  BEGIN 
    v_elements := ( ( SELF.geom.sdo_elem_info.COUNT / 3 ) - 1 );
    <<element_extraction>>
    FOR v_i IN 0 .. v_elements LOOP
        v_offset         := SELF.geom.sdo_elem_info(v_i * 3 + 1);
        v_etype          := SELF.geom.sdo_elem_info(v_i * 3 + 2);
        v_interpretation := SELF.geom.sdo_elem_info(v_i * 3 + 3);
        -- DEBUG dbms_output.put_line('(' || v_offset || ',' || v_etype || ','  || v_interpretation || ')');
        If ( v_etype in (4,1005,2005) ) Then 
           -- Compound elements with sub-elements follow
           v_sub_elem_count := v_sub_elem_count + v_interpretation;
        ElsIf ( v_interpretation = 2 ) Then
             -- Always count up the number arcs whether compound or not
             if ( v_i = v_elements /* last triplet */ ) then
                v_last_ord := SELF.geom.sdo_ordinates.count;
             else
                v_last_ord := SELF.geom.sdo_elem_info((v_i+1)*3 + 1);
             end if;
             -- DEBUG dbms_output.put_line('first_ord='|| v_offset||' last_ord='|| v_last_ord);
             v_nCoords := ((v_last_ord - v_offset) / SELF.geom.get_dims()) + 1 /* Next coord is part of circular arc */;
             -- DEBUG dbms_output.put_line('v_sub_elem_count='|| v_sub_elem_count || ' (v_ncoords=' || v_nCoords || ') + ' ||to_char((v_nCoords-1) / 2));
             v_sub_elem_count := v_sub_elem_count + ((v_nCoords-1)/2) - 1 /* One circular arc is counted in v_interpretation above*/;
        End If;
    END LOOP element_extraction;
    Return v_sub_elem_count;
  END;

  MEMBER FUNCTION ST_CurveN(aposition INTEGER)
         RETURN &&INSTALL_SCHEMA..ST_Curve 
  AS
    v_geom mdsys.sdo_geometry;
  BEGIN 
    SELECT v.geom
      INTO v_geom
      FROM (SELECT rownum as gid, c.geom
              FROM TABLE(SELF.ST_Curves()) c
           ) v
     WHERE v.gid = aposition;             
    RETURN &&INSTALL_SCHEMA..ST_Curve(v_geom);
    EXCEPTION
       WHEN NO_DATA_FOUND THEN
            RETURN NULL;
  END;
  
  STATIC FUNCTION ST_CompoundFromTxt(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL)     RETURN &&INSTALL_SCHEMA..ST_COMPOUNDCURVE AS BEGIN RETURN &&INSTALL_SCHEMA..ST_COMPOUNDCURVE(AWKT,ASRID); END;
  STATIC FUNCTION ST_CompoundFromTxt(AWKT     CLOB, ASRID INTEGER DEFAULT NULL)     RETURN &&INSTALL_SCHEMA..ST_COMPOUNDCURVE AS BEGIN RETURN &&INSTALL_SCHEMA..ST_COMPOUNDCURVE(AWKT,ASRID); END;
  STATIC FUNCTION ST_CompoundFromWKB(AWKB     BLOB, ASRID INTEGER DEFAULT NULL)     RETURN &&INSTALL_SCHEMA..ST_COMPOUNDCURVE AS BEGIN RETURN &&INSTALL_SCHEMA..ST_COMPOUNDCURVE(AWKB,ASRID); END;

END;
/
show errors

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_COMPOUNDCURVE TO PUBLIC;

-- *********************************************************************************************

CREATE OR REPLACE TYPE BODY &&INSTALL_SCHEMA..ST_SURFACE
AS
  OVERRIDING MEMBER FUNCTION ST_DIMENSION RETURN INTEGER AS BEGIN RETURN MDSYS.ST_SURFACE(SELF.GEOM).ST_DIMENSION(); END; 
  MEMBER FUNCTION ST_POINTONSURFACE RETURN &&INSTALL_SCHEMA..ST_POINT AS BEGIN RETURN &&INSTALL_SCHEMA..ST_POINT(MDSYS.ST_SURFACE(SELF.GEOM).ST_POINTONSURFACE().GEOM); END;
  MEMBER FUNCTION ST_Area           RETURN NUMBER        AS BEGIN RETURN MDSYS.ST_SURFACE(SELF.GEOM).ST_AREA(); END;
END;
/
show errors

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_SURFACE TO PUBLIC;

-- *******************************************************

create or replace TYPE BODY &&INSTALL_SCHEMA..ST_CURVEPOLYGON
as
  CONSTRUCTOR FUNCTION ST_CURVEPOLYGON(ACURVE &&INSTALL_SCHEMA..ST_CURVE, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := CASE WHEN (ASRID IS NULL) 
                       THEN MDSYS.ST_CURVEPOLYGON(MDSYS.ST_CURVE(acurve.geom)).GEOM
                       ELSE MDSYS.ST_CURVEPOLYGON(MDSYS.ST_CURVE(acurve.geom),asrid).GEOM
                   END;
     RETURN; 
  end;
  CONSTRUCTOR FUNCTION ST_CURVEPOLYGON(acurve &&INSTALL_SCHEMA..ST_CURVE, acurvearray MDSYS.ST_CURVE_ARRAY, asrid INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := CASE WHEN (ASRID IS NULL) 
                       THEN MDSYS.ST_CURVEPOLYGON(MDSYS.ST_CURVE(acurve.geom),acurvearray).GEOM
                       ELSE MDSYS.ST_CURVEPOLYGON(MDSYS.ST_CURVE(acurve.geom),acurvearray,asrid).GEOM
                   END;
     RETURN; 
  END;
  CONSTRUCTOR FUNCTION ST_CURVEPOLYGON(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_CURVEPOLYGON(MDSYS.ST_CURVEPOLYGON.FROM_WKT(AWKT).GEOM)
                             else &&INSTALL_SCHEMA..ST_CURVEPOLYGON(MDSYS.ST_CURVEPOLYGON.FROM_WKT(AWKT,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_CURVEPOLYGON).GEOM;
     If NOT ( SELF.GEOM IS NOT NULL 
          AND SELF.GEOM.GET_GTYPE() = 3
          AND SELF.GEOM.SDO_ELEM_INFO is NOT null
          AND ((SELF.GEOM.SDO_ELEM_INFO(2) IN (1003,2003) AND SELF.GEOM.SDO_ELEM_INFO(3) IN (2,4))
             OR SELF.GEOM.SDO_ELEM_INFO(2) IN (1005,2005)) ) Then
       raise_application_error(-20120,'Result is not ST_CurvePolygon',true);
     End If;
     RETURN;
  END;
  CONSTRUCTOR FUNCTION ST_CURVEPOLYGON(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_CURVEPOLYGON(MDSYS.ST_CURVEPOLYGON.FROM_WKT(AWKT).GEOM)
                             else &&INSTALL_SCHEMA..ST_CURVEPOLYGON(MDSYS.ST_CURVEPOLYGON.FROM_WKT(AWKT,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_CURVEPOLYGON).GEOM;
     If NOT ( SELF.GEOM IS NOT NULL 
          AND SELF.GEOM.GET_GTYPE() = 3
          AND SELF.GEOM.SDO_ELEM_INFO is NOT null
          AND ((SELF.GEOM.SDO_ELEM_INFO(2) IN (1003,2003) AND SELF.GEOM.SDO_ELEM_INFO(3) IN (2,4))
             OR SELF.GEOM.SDO_ELEM_INFO(2) IN (1005,2005)) ) Then
       raise_application_error(-20120,'Result is not ST_CurvePolygon',true);
     End If;
     RETURN;
  END;
  CONSTRUCTOR FUNCTION ST_CURVEPOLYGON(AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_CURVEPOLYGON(MDSYS.ST_CURVEPOLYGON.FROM_WKB(AWKB).GEOM)
                             else &&INSTALL_SCHEMA..ST_CURVEPOLYGON(MDSYS.ST_CURVEPOLYGON.FROM_WKB(AWKB,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_CURVEPOLYGON).GEOM;
     If NOT ( SELF.GEOM IS NOT NULL 
          AND SELF.GEOM.GET_GTYPE() = 3
          AND SELF.GEOM.SDO_ELEM_INFO is NOT null
          AND ((SELF.GEOM.SDO_ELEM_INFO(2) IN (1003,2003) AND SELF.GEOM.SDO_ELEM_INFO(3) IN (2,4))
             OR SELF.GEOM.SDO_ELEM_INFO(2) IN (1005,2005)) ) Then
       raise_application_error(-20120,'Result is not ST_CurvePolygon',true);
     End If;
     RETURN;
  END;
  MEMBER FUNCTION ST_EXTERIORRING                     RETURN &&INSTALL_SCHEMA..ST_CURVE AS BEGIN 
     RETURN &&INSTALL_SCHEMA..ST_CURVE(MDSYS.ST_CURVEPOLYGON(self.geom).ST_ExteriorRing().GEOM); 
  end;
  MEMBER FUNCTION ST_ExteriorRing(acurve &&INSTALL_SCHEMA..ST_Curve)    RETURN &&INSTALL_SCHEMA..ST_CurvePolygon AS BEGIN 
     RETURN &&INSTALL_SCHEMA..ST_CURVEPOLYGON(MDSYS.ST_CURVEPOLYGON(MDSYS.ST_CURVE(acurve.geom)).ST_ExteriorRing(MDSYS.ST_CURVE(acurve.geom)).GEOM); 
  END;
  MEMBER FUNCTION ST_INTERIORRINGS                    RETURN MDSYS.ST_CURVE_ARRAY AS BEGIN 
     RETURN MDSYS.ST_CURVEPOLYGON(self.geom).ST_InteriorRings(); 
  END;
  MEMBER FUNCTION ST_INTERIORRINGS(ACURVEARRAY MDSYS.ST_CURVE_ARRAY) RETURN &&INSTALL_SCHEMA..ST_CURVEPOLYGON AS BEGIN 
     RETURN &&INSTALL_SCHEMA..ST_CurvePolygon(MDSYS.ST_CURVEPOLYGON(self.geom).ST_InteriorRings(acurvearray).geom); 
  END;
  /* Note: We replace ST_NumInteriorRing because MDSYS.ST_CURVEPOLYGON version returns incorrect value as includes exterior ring */
  MEMBER FUNCTION ST_NumInteriorRing 
  RETURN INTEGER 
  AS 
    v_elements   pls_integer := 0;
    v_ring_count pls_integer := 0;
  Begin
     IF (SELF.GEOM IS NULL) THEN
        RETURN NULL;
     END IF;
     v_elements := ( ( SELF.geom.sdo_elem_info.COUNT / 3 ) - 1 );
     <<element_extraction>>
     FOR v_i IN 0 .. v_elements LOOP
         If ( SELF.geom.sdo_elem_info(v_i * 3 + 2) in (2003,2005) ) Then
            v_ring_count := v_ring_count + 1;
         End If;
     END LOOP element_extraction;
     Return v_ring_count;
  END;
  /* Note: ST_InteriorRingN does not work correctly for CurvePolygons */
  MEMBER FUNCTION ST_InteriorRingN(aposition INTEGER) 
  RETURN &&INSTALL_SCHEMA..ST_Curve 
  AS 
    v_geom mdsys.sdo_geometry;
  BEGIN 
    /* Note: aposition of 1 means ST_Dump element of aposition+1 */
    if (APOSITION > 0) then
         select t.geometry
           into v_geom
           from table(&&INSTALL_SCHEMA..T_GEOMETRY(SELF.geom).ST_Dump()) t
          where t.gid = (aposition+1);
        RETURN &&INSTALL_SCHEMA..ST_Curve(v_geom);
    End If;
    RETURN null; 
  END;
  --  MEMBER FUNCTION ST_CurvePolyToPoly RETURN &&INSTALL_SCHEMA..ST_Polygon
END;
/
show errors

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_CURVEPOLYGON TO PUBLIC;

-- *******************************************************

create or replace TYPE BODY &&INSTALL_SCHEMA..ST_POLYGON
AS
  CONSTRUCTOR FUNCTION ST_POLYGON(ALINESTRING ST_LINESTRING, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := CASE WHEN (ASRID IS NULL) 
                       THEN MDSYS.ST_POLYGON(MDSYS.ST_LINESTRING(ALINESTRING.GEOM)).GEOM
                       ELSE MDSYS.ST_POLYGON(MDSYS.ST_LINESTRING(ALINESTRING.GEOM),ASRID).GEOM 
                   END;
     RETURN; 
  END;
  CONSTRUCTOR FUNCTION ST_POLYGON(alinestring ST_LineString, alinestringarray MDSYS.ST_LineString_Array, asrid INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := CASE WHEN (ASRID IS NULL) 
                       THEN MDSYS.ST_POLYGON(MDSYS.ST_LINESTRING(ALINESTRING.GEOM), alinestringarray).GEOM
                       ELSE MDSYS.ST_POLYGON(MDSYS.ST_LINESTRING(ALINESTRING.GEOM), alinestringarray, asrid).GEOM
                   END;
     RETURN; 
  END;
  CONSTRUCTOR FUNCTION ST_POLYGON(xmin number, ymin number, xmax number, ymax number, asrid number default null) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := SDO_GEOMETRY(2003,ASRID,NULL,SDO_ELEM_INFO_ARRAY(1,1003,3),SDO_ORDINATE_ARRAY(xmin,ymin,xmax,ymax)); 
     RETURN; 
  END;
  CONSTRUCTOR FUNCTION ST_POLYGON(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_POLYGON(MDSYS.ST_POLYGON.FROM_WKT(AWKT).GEOM)
                             else &&INSTALL_SCHEMA..ST_POLYGON(MDSYS.ST_POLYGON.FROM_WKT(AWKT,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_POLYGON).GEOM;
     IF NOT ( SELF.GEOM IS NOT NULL
          AND SELF.GEOM.GET_GTYPE() = 3
          AND SELF.GEOM.SDO_ELEM_INFO is NOT null
          AND SELF.GEOM.SDO_ELEM_INFO(2) IN (1003,2003) 
          AND SELF.GEOM.SDO_ELEM_INFO(3)=1 ) Then
       raise_application_error(-20120,'Result is not ST_Polygon',true);
     End If;
     RETURN;
  END;
  CONSTRUCTOR FUNCTION ST_POLYGON(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS  BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_POLYGON(MDSYS.ST_POLYGON.FROM_WKT(AWKT).GEOM)
                             else &&INSTALL_SCHEMA..ST_POLYGON(MDSYS.ST_POLYGON.FROM_WKT(AWKT,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_POLYGON).GEOM;
     IF NOT ( SELF.GEOM IS NOT NULL
          AND SELF.GEOM.GET_GTYPE() = 3
          AND SELF.GEOM.SDO_ELEM_INFO is NOT null
          AND SELF.GEOM.SDO_ELEM_INFO(2) IN (1003,2003) 
          AND SELF.GEOM.SDO_ELEM_INFO(3)=1 ) Then
       raise_application_error(-20120,'Result is not ST_Polygon',true);
     End If;
     RETURN;
  END;
  CONSTRUCTOR FUNCTION ST_POLYGON(AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_POLYGON(MDSYS.ST_POLYGON.FROM_WKB(AWKB).GEOM)
                             else &&INSTALL_SCHEMA..ST_POLYGON(MDSYS.ST_POLYGON.FROM_WKB(AWKB,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_POLYGON).GEOM;
     IF NOT ( SELF.GEOM IS NOT NULL
          AND SELF.GEOM.GET_GTYPE() = 3
          AND SELF.GEOM.SDO_ELEM_INFO is NOT null
          AND SELF.GEOM.SDO_ELEM_INFO(2) IN (1003,2003) 
          AND SELF.GEOM.SDO_ELEM_INFO(3)=1 ) Then
       raise_application_error(-20120,'Result is not ST_Polygon',true);
     End If;
     RETURN;
  END;
  OVERRIDING member function ST_EXTERIORRING return &&INSTALL_SCHEMA..ST_LINESTRING as begin return &&INSTALL_SCHEMA..ST_LINESTRING(MDSYS.ST_POLYGON(SELF.GEOM).ST_EXTERIORRING().GEOM); end;
  OVERRIDING MEMBER FUNCTION ST_EXTERIORRING(ACURVE &&INSTALL_SCHEMA..ST_CURVE) RETURN &&INSTALL_SCHEMA..ST_POLYGON AS BEGIN RETURN &&INSTALL_SCHEMA..ST_Polygon(MDSYS.ST_Polygon(SELF.GEOM).ST_ExteriorRing(MDSYS.ST_CURVE(acurve.geom)).GEOM); END;
  MEMBER FUNCTION ST_INTERIORRINGSP RETURN MDSYS.ST_LINESTRING_ARRAY AS BEGIN RETURN MDSYS.ST_Polygon(SELF.GEOM).ST_INTERIORRINGSP(); END;
  MEMBER FUNCTION ST_InteriorRingsP(acurvearray MDSYS.ST_Curve_Array) RETURN &&INSTALL_SCHEMA..ST_Polygon AS BEGIN RETURN &&INSTALL_SCHEMA..ST_Polygon(MDSYS.ST_Polygon(SELF.GEOM).ST_InteriorRingsP(acurvearray).geom); END;
  OVERRIDING MEMBER FUNCTION ST_INTERIORRINGN(APOSITION INTEGER) RETURN &&INSTALL_SCHEMA..ST_LINESTRING AS BEGIN RETURN &&INSTALL_SCHEMA..ST_LINESTRING(MDSYS.ST_POLYGON(SELF.GEOM).ST_INTERIORRINGN(APOSITION).GEOM); END;

  STATIC FUNCTION ST_PolyFromText(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_POLYGON AS BEGIN RETURN &&INSTALL_SCHEMA..ST_POLYGON(AWKT,ASRID); END;
  STATIC FUNCTION ST_PolyFromText(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_POLYGON AS BEGIN RETURN &&INSTALL_SCHEMA..ST_POLYGON(AWKT,ASRID); END;
  STATIC FUNCTION ST_PolyFromWKB (AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_POLYGON AS BEGIN RETURN &&INSTALL_SCHEMA..ST_POLYGON(AWKB,ASRID); END;
  
  STATIC FUNCTION ST_BDPOLYFROMTEXT(AWKT CLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_POLYGON AS BEGIN 
     RETURN TREAT(case when ASRID is null
                       then &&INSTALL_SCHEMA..ST_POLYGON(MDSYS.ST_POLYGON.ST_BDPOLYFROMTEXT(AWKT).GEOM)
                       else &&INSTALL_SCHEMA..ST_POLYGON(MDSYS.ST_POLYGON.ST_BDPOLYFROMTEXT(AWKT,ASRID).GEOM)
                   end
                  As &&INSTALL_SCHEMA..ST_Polygon);
  END;
  STATIC FUNCTION ST_BDPOLYFROMTEXT(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_POLYGON AS BEGIN 
     RETURN TREAT(case when ASRID is null
                       then &&INSTALL_SCHEMA..ST_POLYGON(MDSYS.ST_POLYGON.ST_BDPOLYFROMTEXT(AWKT).GEOM)
                       else &&INSTALL_SCHEMA..ST_POLYGON(MDSYS.ST_POLYGON.ST_BDPOLYFROMTEXT(AWKT,ASRID).GEOM)
                   end
                  As &&INSTALL_SCHEMA..ST_Polygon);
  END;
  STATIC FUNCTION ST_BDPOLYFROMWKB(AWKB BLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_POLYGON AS BEGIN 
    RETURN TREAT(case when ASRID is null
                 then &&INSTALL_SCHEMA..ST_Polygon(MDSYS.ST_Polygon.ST_BDPOLYFROMWKB(AWKB).GEOM)
                 else &&INSTALL_SCHEMA..ST_Polygon(MDSYS.ST_Polygon.ST_BDPOLYFROMWKB(AWKB,ASRID).GEOM)
             end
            As &&INSTALL_SCHEMA..ST_Polygon);
  END;
  STATIC FUNCTION ST_Envelope(xmin number, ymin number, xmax number, ymax number, asrid number default null) RETURN &&INSTALL_SCHEMA..ST_SURFACE 
  As 
  BEGIN
     RETURN new &&INSTALL_SCHEMA..ST_POLYGON(xmin,ymin,xmax,ymax,ASRID); 
  END;
  
END;
/
show errors

GRANT EXECUTE ON ST_POLYGON TO PUBLIC;

-- *********************************************************************************************

CREATE OR REPLACE
TYPE BODY &&INSTALL_SCHEMA..ST_GEOMCOLLECTION
AS
  CONSTRUCTOR FUNCTION ST_GEOMCOLLECTION(AGEOMETRY &&INSTALL_SCHEMA..ST_GEOMETRY, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN
     IF (ASRID IS NULL) THEN
        SELF.GEOM := MDSYS.ST_GEOMCOLLECTION(ageometry.geom).GEOM;
     ELSE
        SELF.GEOM := MDSYS.ST_GEOMCOLLECTION(MDSYS.ST_GEOMETRY(AGEOMETRY.GEOM),ASRID).GEOM; 
     END IF;
     RETURN; 
  END;
  CONSTRUCTOR FUNCTION ST_GEOMCOLLECTION(AGEOMETRYARRAY MDSYS.ST_GEOMETRY_ARRAY, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN
     IF (ASRID IS NULL) THEN
        SELF.GEOM := MDSYS.ST_GEOMCOLLECTION(ageometryarray).GEOM;
     ELSE
        SELF.GEOM := MDSYS.ST_GEOMCOLLECTION(ageometryarray,asrid).GEOM; 
     END IF;
     RETURN; 
  END;

  OVERRIDING MEMBER FUNCTION ST_Dimension                               RETURN Integer AS BEGIN RETURN MDSYS.ST_GEOMCOLLECTION(SELF.GEOM).ST_Dimension(); END;
  MEMBER FUNCTION ST_GEOMETRIES                                         RETURN MDSYS.ST_GEOMETRY_ARRAY AS BEGIN RETURN MDSYS.ST_GEOMCOLLECTION(SELF.GEOM).ST_GEOMETRIES(); END;
  MEMBER FUNCTION ST_GEOMETRIES(AGEOMETRYARRAY MDSYS.ST_GEOMETRY_ARRAY) RETURN &&INSTALL_SCHEMA..ST_GEOMCOLLECTION AS BEGIN RETURN &&INSTALL_SCHEMA..ST_GEOMCOLLECTION(MDSYS.ST_GEOMCOLLECTION(SELF.GEOM).ST_GEOMETRIES(ageometryarray).GEOM); END;
         
  MEMBER FUNCTION ST_NUMGEOMETRIES RETURN INTEGER AS BEGIN 
    return case SELF.ST_GeometryType()
              when 'ST_POINT'           then 1
              when 'ST_LINESTRING'      then 1
              when 'ST_POLYGON'         then 1
              when 'ST_MULTIPOINT'      then mdsys.sdo_util.getNumVertices(SELF.GEOM)
              when 'ST_MULTILINESTRING' then SELF.ST_GEOMETRIES().COUNT
              when 'ST_MULTIPOLYGON'    then SELF.ST_GEOMETRIES().COUNT
              when 'ST_GEOMCOLLECTION'  then SELF.ST_GEOMETRIES().COUNT
              else SELF.ST_GEOMETRIES().COUNT
          end;
  END;
  
  MEMBER FUNCTION ST_GEOMETRYN(N INTEGER)  
         RETURN &&INSTALL_SCHEMA..ST_GEOMETRY 
  AS 
    v_geoms mdsys.ST_GEOMETRY_ARRAY;
  BEGIN 
    if ( n <= 0 ) then
       return null;
    End If;
    v_geoms := SELF.ST_Geometries();
    return case SELF.ST_GeometryType()
                when 'ST_POINT'           then SELF
                when 'ST_LINESTRING'      then SELF
                when 'ST_POLYGON'         then SELF
                when 'ST_MULTIPOINT'      then case when N <= mdsys.sdo_util.getNumVertices(SELF.GEOM)
                                                    then TREAT(&&INSTALL_SCHEMA..ST_POINT(mdsys.sdo_util.getVertices(SELF.GEOM)(N).x,
                                                                             mdsys.sdo_util.getVertices(SELF.GEOM)(N).y) as &&INSTALL_SCHEMA..ST_Geometry)
                                                    else SELF
                                                end
                when 'ST_MULTILINESTRING' then case when N <= v_geoms.COUNT 
                                                    then &&INSTALL_SCHEMA..ST_Geometry(v_geoms(N).geom)
                                                    else SELF
                                                end
                when 'ST_MULTIPOLYGON'    then case when N <= v_geoms.COUNT 
                                                    then &&INSTALL_SCHEMA..ST_Geometry(v_geoms(N).geom)
                                                    else SELF
                                                end
                when 'ST_GEOMCOLLECTION'  then case when N <= v_geoms.COUNT 
                                                    then &&INSTALL_SCHEMA..ST_Geometry(v_geoms(N).geom)
                                                    else SELF
                                                end
                ELSE case when N <= v_geoms.COUNT 
                          then &&INSTALL_SCHEMA..ST_Geometry(v_geoms(N).geom)
                          else SELF
                      end
            end;
  END;

END;
/
show errors

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_GEOMCOLLECTION TO PUBLIC;

-- *********************************************************************************************

CREATE OR REPLACE TYPE BODY ST_MULTIPOINT
AS
  CONSTRUCTOR FUNCTION ST_MULTIPOINT(apointarray MDSYS.ST_Point_Array, asrid INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     IF (ASRID IS NULL) THEN
        SELF.GEOM := MDSYS.ST_MULTIPOINT(apointarray).GEOM;
     ELSE 
        SELF.GEOM := MDSYS.ST_MULTIPOINT(apointarray,asrid).GEOM; 
     END IF;
     RETURN; 
  END;
  CONSTRUCTOR FUNCTION ST_MULTIPOINT(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_MULTIPOINT(MDSYS.ST_MULTIPOINT.FROM_WKT(AWKT).GEOM)
                             else &&INSTALL_SCHEMA..ST_MULTIPOINT(MDSYS.ST_MULTIPOINT.FROM_WKT(AWKT,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_MULTIPOINT).GEOM;
     IF ( SELF.GEOM.GET_GTYPE() <> 5 ) THEN
       raise_application_error(-20120,'Result is not ST_MultiPOINT',true);
     END IF;
     RETURN;
  END;
  CONSTRUCTOR FUNCTION ST_MULTIPOINT(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_MULTIPOINT(MDSYS.ST_MULTIPOINT.FROM_WKT(AWKT).GEOM)
                             else &&INSTALL_SCHEMA..ST_MULTIPOINT(MDSYS.ST_MULTIPOINT.FROM_WKT(AWKT,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_MULTIPOINT).GEOM;
     IF ( SELF.GEOM.GET_GTYPE() <> 5 ) THEN
       raise_application_error(-20120,'Result is not ST_MultiPOINT',true);
     END IF;
     RETURN;
  END;
  CONSTRUCTOR FUNCTION ST_MULTIPOINT(AWKB BLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_MULTIPOINT(MDSYS.ST_MULTIPOINT.FROM_WKB(AWKB).GEOM)
                             else &&INSTALL_SCHEMA..ST_MULTIPOINT(MDSYS.ST_MULTIPOINT.FROM_WKB(AWKB,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_MULTIPOINT).GEOM;
     IF ( SELF.GEOM.GET_GTYPE() <> 5 ) THEN
       raise_application_error(-20120,'Result is not ST_MultiPOINT',true);
     END IF;
     RETURN;
  END;
  OVERRIDING MEMBER FUNCTION ST_Dimension RETURN Integer  AS BEGIN RETURN MDSYS.ST_MULTIPOINT(SELF.GEOM).ST_Dimension(); END;
  OVERRIDING MEMBER FUNCTION ST_IsSimple  RETURN INTEGER AS BEGIN RETURN MDSYS.ST_MULTIPOINT(SELF.GEOM).ST_isSimple(); END;
  STATIC FUNCTION ST_MPointFromText(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MULTIPOINT AS BEGIN RETURN &&INSTALL_SCHEMA..ST_MULTIPOINT(AWKT,ASRID); END;
  STATIC FUNCTION ST_MPointFromText(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MULTIPOINT AS BEGIN RETURN &&INSTALL_SCHEMA..ST_MULTIPOINT(AWKT,ASRID); END;
  STATIC FUNCTION ST_MPointFromWKB(AWKB      BLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MULTIPOINT AS BEGIN RETURN &&INSTALL_SCHEMA..ST_MULTIPOINT(AWKB,ASRID); END;
  
END;
/
show errors

grant execute on &&INSTALL_SCHEMA..ST_MULTIPOINT to public;

-- *******************************************************

create or replace type body &&INSTALL_SCHEMA..ST_MULTICURVE
AS
  CONSTRUCTOR FUNCTION ST_MULTICURVE(acurvearray MDSYS.ST_CURVE_ARRAY, asrid INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     IF (ASRID IS NULL) THEN
        SELF.GEOM := MDSYS.ST_MULTICURVE(acurvearray).GEOM;
     ELSE 
        SELF.GEOM := MDSYS.ST_MULTICURVE(acurvearray,asrid).GEOM; 
     END IF;
     RETURN; 
  END;
  OVERRIDING MEMBER FUNCTION ST_Dimension RETURN Integer AS BEGIN RETURN MDSYS.ST_MULTICURVE(SELF.GEOM).ST_Dimension(); END;
  OVERRIDING MEMBER FUNCTION ST_IsSimple  RETURN Integer AS BEGIN RETURN MDSYS.ST_MULTICURVE(SELF.GEOM).ST_IsSimple(); END;
  MEMBER FUNCTION ST_Length   RETURN NUMBER  AS BEGIN RETURN MDSYS.ST_MULTICURVE(SELF.GEOM).ST_Length(); END;
  MEMBER FUNCTION ST_IsClosed RETURN Integer AS BEGIN RETURN MDSYS.ST_MULTICURVE(SELF.GEOM).ST_IsClosed(); END;
END;
/
show errors

grant execute on &&INSTALL_SCHEMA..ST_MULTICURVE to public;

-- *******************************************************

CREATE OR REPLACE TYPE BODY &&INSTALL_SCHEMA..ST_MultiLineString
AS
  CONSTRUCTOR FUNCTION ST_MULTILINESTRING(alinestringarray MDSYS.ST_LINESTRING_ARRAY, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := CASE WHEN (ASRID IS NULL) 
                       THEN MDSYS.ST_MULTILINESTRING(alinestringarray).GEOM
                       ELSE MDSYS.ST_MULTILINESTRING(ALINESTRINGARRAY,ASRID).GEOM
                   END;
     RETURN;
  END;   
  CONSTRUCTOR FUNCTION ST_MULTILINESTRING(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_MULTILINESTRING(MDSYS.ST_MULTILINESTRING.FROM_WKT(AWKT).GEOM)
                             else &&INSTALL_SCHEMA..ST_MULTILINESTRING(MDSYS.ST_MULTILINESTRING.FROM_WKT(AWKT,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_MULTILINESTRING).GEOM;
     IF NOT ( SELF.GEOM IS NOT NULL 
          AND SELF.GEOM.GET_GTYPE() = 6 
          AND SELF.GEOM.SDO_ELEM_INFO IS NOT NULL 
          AND SELF.GEOM.SDO_ELEM_INFO(2)=2
          AND SELF.GEOM.SDO_ELEM_INFO(3)=1 ) THEN
       raise_application_error(-20120,'Result is not ST_MultiLineString',true);
     END IF;
     RETURN;
  END;
  CONSTRUCTOR FUNCTION ST_MULTILINESTRING(AWKT CLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_MULTILINESTRING(MDSYS.ST_MULTILINESTRING.FROM_WKT(AWKT).GEOM)
                             else &&INSTALL_SCHEMA..ST_MULTILINESTRING(MDSYS.ST_MULTILINESTRING.FROM_WKT(AWKT,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_MULTILINESTRING).GEOM;
     IF NOT ( SELF.GEOM IS NOT NULL 
          AND SELF.GEOM.GET_GTYPE() = 6 
          AND SELF.GEOM.SDO_ELEM_INFO IS NOT NULL 
          AND SELF.GEOM.SDO_ELEM_INFO(2)=2
          AND SELF.GEOM.SDO_ELEM_INFO(3)=1 ) THEN
       raise_application_error(-20120,'Result is not ST_MultiLineString',true);
     END IF;
     RETURN;
  END;
  CONSTRUCTOR FUNCTION ST_MULTILINESTRING(AWKB BLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_MULTILINESTRING(MDSYS.ST_MULTILINESTRING.FROM_WKB(AWKB).GEOM)
                             else &&INSTALL_SCHEMA..ST_MULTILINESTRING(MDSYS.ST_MULTILINESTRING.FROM_WKB(AWKB,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_MULTILINESTRING).GEOM;
     IF NOT ( SELF.GEOM IS NOT NULL 
          AND SELF.GEOM.GET_GTYPE() = 6 
          AND SELF.GEOM.SDO_ELEM_INFO IS NOT NULL 
          AND SELF.GEOM.SDO_ELEM_INFO(2)=2
          AND SELF.GEOM.SDO_ELEM_INFO(3)=1 ) THEN
       raise_application_error(-20120,'Result is not ST_MultiLineString',true);
     END IF;
     RETURN;
  END;
  STATIC FUNCTION ST_MLineFromText(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MULTILINESTRING AS BEGIN RETURN &&INSTALL_SCHEMA..ST_MULTILINESTRING(AWKT,ASRID); END;
  STATIC FUNCTION ST_MLineFromText(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MULTILINESTRING AS BEGIN RETURN &&INSTALL_SCHEMA..ST_MULTILINESTRING(AWKT,ASRID); END;
  STATIC FUNCTION ST_MLineFromWKB (AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MULTILINESTRING AS BEGIN RETURN &&INSTALL_SCHEMA..ST_MULTILINESTRING(AWKB,ASRID); END;
END;
/
show errors

grant execute on &&INSTALL_SCHEMA..ST_MULTILINESTRING to public;

-- ************************************************************************************
-- Technically Not Instantiable

create or replace
TYPE BODY &&INSTALL_SCHEMA..ST_MULTISURFACE
AS
  CONSTRUCTOR FUNCTION ST_MULTISURFACE(asurfacearray MDSYS.ST_SURFACE_ARRAY, asrid INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     IF (ASRID IS NULL) THEN
        SELF.GEOM := MDSYS.ST_MULTISURFACE(asurfacearray).GEOM; 
     ELSE
        SELF.GEOM := MDSYS.ST_MULTISURFACE(asurfacearray,asrid).GEOM; 
     END IF;
     RETURN; 
  END;
  OVERRIDING MEMBER FUNCTION ST_Dimension RETURN Integer       AS BEGIN RETURN MDSYS.ST_MULTISURFACE(SELF.GEOM).ST_DImension(); END;
  MEMBER FUNCTION ST_PointonSurface       RETURN &&INSTALL_SCHEMA..ST_POINT AS BEGIN RETURN &&INSTALL_SCHEMA..ST_Point(MDSYS.ST_MULTISURFACE(SELF.GEOM).ST_PointOnSurface().GEOM); END;
  MEMBER FUNCTION ST_Area                 RETURN NUMBER        AS BEGIN RETURN MDSYS.ST_MULTISURFACE(SELF.GEOM).ST_Area(); END;
END;
/
SHOW ERRORS

grant execute on &&INSTALL_SCHEMA..ST_MULTISURFACE to public;

-- *******************************************************

CREATE OR REPLACE TYPE BODY &&INSTALL_SCHEMA..ST_MultiPolygon
AS
  CONSTRUCTOR FUNCTION ST_MultiPolygon(apolygonarray MDSYS.ST_POLYGON_ARRAY, asrid INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := CASE WHEN (ASRID IS NULL) 
                       THEN MDSYS.ST_MultiPolygon(apolygonarray).GEOM
                       ELSE MDSYS.ST_MultiPolygon(apolygonarray,asrid).GEOM
                   END;
     RETURN; 
  END;
  CONSTRUCTOR FUNCTION ST_MultiPolygon(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_MultiPolygon(MDSYS.ST_MultiPolygon.FROM_WKT(AWKT).GEOM)
                             else &&INSTALL_SCHEMA..ST_MultiPolygon(MDSYS.ST_MultiPolygon.FROM_WKT(AWKT,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_MultiPolygon).GEOM;
     IF NOT ( SELF.GEOM IS NOT NULL
          AND SELF.GEOM.GET_GTYPE() = 7
          AND SELF.GEOM.SDO_ELEM_INFO is NOT null
          AND SELF.GEOM.SDO_ELEM_INFO(2) IN (1003,2003) 
          AND SELF.GEOM.SDO_ELEM_INFO(3)=1 ) Then
       raise_application_error(-20120,'Result is not ST_Polygon',true);
     End If;
     RETURN;
  END;
  CONSTRUCTOR FUNCTION ST_MultiPolygon(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_MultiPolygon(MDSYS.ST_MultiPolygon.FROM_WKT(AWKT).GEOM)
                             else &&INSTALL_SCHEMA..ST_MultiPolygon(MDSYS.ST_MultiPolygon.FROM_WKT(AWKT,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_MultiPolygon).GEOM;
     IF NOT ( SELF.GEOM IS NOT NULL
          AND SELF.GEOM.GET_GTYPE() = 7
          AND SELF.GEOM.SDO_ELEM_INFO is NOT null
          AND SELF.GEOM.SDO_ELEM_INFO(2) IN (1003,2003) 
          AND SELF.GEOM.SDO_ELEM_INFO(3)=1 ) Then
       raise_application_error(-20120,'Result is not ST_Polygon',true);
     End If;
     RETURN;
  END;
  CONSTRUCTOR FUNCTION ST_MultiPolygon(AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN SELF AS RESULT AS BEGIN 
     SELF.GEOM := TREAT(case when ASRID is null 
                             then &&INSTALL_SCHEMA..ST_MultiPolygon(MDSYS.ST_MultiPolygon.FROM_WKB(AWKB).GEOM)
                             else &&INSTALL_SCHEMA..ST_MultiPolygon(MDSYS.ST_MultiPolygon.FROM_WKB(AWKB,ASRID).GEOM)
                         end AS &&INSTALL_SCHEMA..ST_MultiPolygon).GEOM;
     IF NOT ( SELF.GEOM IS NOT NULL
          AND SELF.GEOM.GET_GTYPE() = 7
          AND SELF.GEOM.SDO_ELEM_INFO is NOT null
          AND SELF.GEOM.SDO_ELEM_INFO(2) IN (1003,2003) 
          AND SELF.GEOM.SDO_ELEM_INFO(3)=1 ) Then
       raise_application_error(-20120,'Result is not ST_Polygon',true);
     End If;
     RETURN;
  END;

  STATIC FUNCTION ST_MPolyFromText(AWKT VARCHAR2, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MultiPolygon AS BEGIN RETURN &&INSTALL_SCHEMA..ST_MultiPolygon(AWKT,ASRID); END;
  STATIC FUNCTION ST_MPolyFromText(AWKT     CLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MultiPolygon AS BEGIN RETURN &&INSTALL_SCHEMA..ST_MultiPolygon(AWKT,ASRID); END;
  STATIC FUNCTION ST_MPolyFromWKB (AWKB     BLOB, ASRID INTEGER DEFAULT NULL) RETURN &&INSTALL_SCHEMA..ST_MultiPolygon AS BEGIN RETURN &&INSTALL_SCHEMA..ST_MultiPolygon(AWKB,ASRID); END;

  STATIC FUNCTION ST_BdMPolyFromText(AWKT CLOB, ASRID INTEGER DEFAULT NULL)   RETURN &&INSTALL_SCHEMA..ST_MultiPolygon AS BEGIN 
     RETURN case when ASRID IS NULL 
                 then &&INSTALL_SCHEMA..ST_MultiPolygon(MDSYS.ST_MultiPolygon.ST_BdMPolyFromText(AWKT).GEOM)
                 else &&INSTALL_SCHEMA..ST_MultiPolygon(MDSYS.ST_MultiPolygon.ST_BdMPolyFromText(AWKT,ASRID).GEOM)
             END;
  END;
  
  STATIC FUNCTION ST_BdMPolyFromWKB(AWKB BLOB, ASRID INTEGER DEFAULT NULL)    RETURN &&INSTALL_SCHEMA..ST_MultiPolygon AS BEGIN 
     RETURN case when ASRID IS NULL 
                 THEN &&INSTALL_SCHEMA..ST_MultiPolygon(MDSYS.ST_MultiPolygon.ST_BdMPolyFromWKB(AWKB).GEOM)
                 ELSE &&INSTALL_SCHEMA..ST_MultiPolygon(MDSYS.ST_MultiPolygon.ST_BdMPolyFromWKB(awkB,asrid).GEOM)
             END;
  END;
END;
/
show errors

GRANT EXECUTE ON &&INSTALL_SCHEMA..ST_MultiPolygon TO PUBLIC;

-- *******************************************************


Prompt Check ST_GEOMETRY type hierarchy has compiled correctly ...
set serveroutput on size unlimited
WHENEVER SQLERROR EXIT FAILURE;
DECLARE
   v_OK   boolean := true;
   v_list varchar2(30000);
BEGIN
   FOR rec IN (select object_name || ' - ' || object_Type as object_and_type, status 
                 from user_objects
                where object_name not like 'ST_ANNOT%' 
                  and object_name not in ('ST_ANGLE','ST_DIRECTION') 
                  and object_name LIKE 'ST!_%' escape '!' 
                  and object_type in ('TYPE','TYPE BODY') ) LOOP
      IF ( rec.status = 'VALID' ) Then
         dbms_output.put_line(rec.object_type || ' ' || USER || '.' || rec.object_name || ' is valid.');
      ELSE
         dbms_output.put_line(rec.object_type || ' ' || USER || '.' || rec.object_name || ' is invalid.');
         v_ok := false;
      END IF;
   END LOOP;
   IF ( NOT v_OK ) THEN
      dbms_output.put_line(CHR(10) || USER||'.ST_Geometry type failed to fully compile.' || CHR(10) || 'Invalid objects:' || v_list);
      raise_application_error(-20001,'');
   ELSE
      execute immediate 'GRANT EXECUTE ON &&INSTALL_SCHEMA..' || v_obj_name || ' TO public WITH GRANT OPTION';
      dbms_output.put_line(USER||'.ST_GEOMETRY type compiled correctly.');   
   END IF;
END;
/
SHOW ERRORS

EXIT SUCCESS;

