CREATE OR REPLACE PACKAGE test_t_geometry IS

   /* generated by utPLSQL for SQL Developer on 2019-08-18 18:12:15 */

   --%suite(test_t_geometry)
   --%suitepath(alltests)
   
   --%test
   PROCEDURE t_geometry;

   --%test
   PROCEDURE st_release;

   --%test
   PROCEDURE st_asgeometryrow;

   --%test
   PROCEDURE st_setsdogtype;

   --%test
   PROCEDURE st_setsrid;

   --%test
   PROCEDURE st_setprojection;

   --%test
   PROCEDURE st_setprecision;

   --%test
   PROCEDURE st_settolerance;

   --%test
   PROCEDURE st_setpoint;

   --%test
   PROCEDURE st_gtype;

   --%test
   PROCEDURE st_dims;

   --%test
   PROCEDURE st_sdo_gtype;

   --%test
   PROCEDURE st_srid;

   --%test
   PROCEDURE st_aswkb;

   --%test
   PROCEDURE st_aswkt;

   --%test
   PROCEDURE st_asewkt;

   --%test
   PROCEDURE st_astext;

   --%test
   PROCEDURE st_fromtext;

   --%test
   PROCEDURE st_fromewkt;

   --%test
   PROCEDURE st_asttext;

   --%test
   PROCEDURE st_coorddimension;

   --%test
   PROCEDURE st_dimension;

   --%test
   PROCEDURE st_hasdimension;

   --%test
   PROCEDURE st_hasz;

   --%test
   PROCEDURE st_hasm;

   --%test
   PROCEDURE st_isvalid;

   --%test
   PROCEDURE st_validate;

   --%test
   PROCEDURE st_isvalidcontext;

   --%test
   PROCEDURE st_isempty;

   --%test
   PROCEDURE st_isclosed;

   --%test
   PROCEDURE st_issimple;

   --%test
   PROCEDURE st_geometrytype;

   --%test
   PROCEDURE st_numgeometries;

   --%test
   PROCEDURE st_numvertices;

   --%test
   PROCEDURE st_numpoints;

   --%test
   PROCEDURE st_numelements;

   --%test
   PROCEDURE st_numsubelements;

   --%test
   PROCEDURE st_elementtypeat;

   --%test
   PROCEDURE st_numinteriorring;

   --%test
   PROCEDURE st_numsegments;

   --%test
   PROCEDURE st_isorientedpoint;

   --%test
   PROCEDURE st_hascirculararcs;

   --%test
   PROCEDURE st_incirculararc;

   --%test
   PROCEDURE st_numrectangles;

   --%test
   PROCEDURE st_hasrectangles;

   --%test
   PROCEDURE st_round;

   --%test
   PROCEDURE st_numrings;

   --%test
   PROCEDURE st_eleminfo;

   --%test
   PROCEDURE st_numelementinfo;

   --%test
   PROCEDURE st_dump;

   --%test
   PROCEDURE st_exteriorring;

   --%test
   PROCEDURE st_boundary;

   --%test
   PROCEDURE st_length;

   --%test
   PROCEDURE st_area;

   --%test
   PROCEDURE st_distance;

   --%test
   PROCEDURE st_relate;

   --%test
   PROCEDURE st_swapordinates;

   --%test
   PROCEDURE st_filterrings;

   --%test
   PROCEDURE st_removeinnerrings;

   --%test
   PROCEDURE st_extract;

   --%test
   PROCEDURE st_extractrings;

   --%test
   PROCEDURE st_vertices;

   --%test
   PROCEDURE st_segmentize;

   --%test
   PROCEDURE st_flip_segments;

   --%test
   PROCEDURE st_rectangle2polygon;

   --%test
   PROCEDURE st_polygon2rectangle;

   --%test
   PROCEDURE st_diminfo2rectangle;

   --%test
   PROCEDURE st_geometry2diminfo;

   --%test
   PROCEDURE st_mbr;

   --%test
   PROCEDURE st_envelope;

   --%test
   PROCEDURE st_polygon2line;

   --%test
   PROCEDURE st_multi;

   --%test
   PROCEDURE st_append;

   --%test
   PROCEDURE st_rotate;

   --%test
   PROCEDURE st_scale;

   --%test
   PROCEDURE st_translate;

   --%test
   PROCEDURE st_reflect;

   --%test
   PROCEDURE st_rottransscale;

   --%test
   PROCEDURE st_affine;

   --%test
   PROCEDURE st_fixordinates;

   --%test
   PROCEDURE st_vertexn;

   --%test
   PROCEDURE st_startvertex;

   --%test
   PROCEDURE st_endvertex;

   --%test
   PROCEDURE st_pointn;

   --%test
   PROCEDURE st_startpoint;

   --%test
   PROCEDURE st_endpoint;

   --%test
   PROCEDURE st_segmentn;

   --%test
   PROCEDURE st_startsegment;

   --%test
   PROCEDURE st_endsegment;

   --%test
   PROCEDURE st_insertvertex;

   --%test
   PROCEDURE st_updatevertex;

   --%test
   PROCEDURE st_deletevertex;

   --%test
   PROCEDURE st_removeduplicatevertices;

   --%test
   PROCEDURE st_extend;

   --%test
   PROCEDURE st_reduce;

   --%test
   PROCEDURE st_cogo2line;

   --%test
   PROCEDURE st_line2cogo;

   --%test
   PROCEDURE st_cogo2polygon;

   --%test
   PROCEDURE st_travellingsalesman;

   --%test
   PROCEDURE st_compress;

   --%test
   PROCEDURE st_decompress;

   --%test
   PROCEDURE st_sdopoint2ord;

   --%test
   PROCEDURE st_ord2sdopoint;
   
   --%test
   PROCEDURE st_tomultipoint;

   --%test
   PROCEDURE st_to2d;

   --%test
   PROCEDURE st_to3d;

   --%test
   PROCEDURE st_fixz;

   --%test
   PROCEDURE st_tile;

   --%test
   PROCEDURE st_smoothtile;

   --%test
   PROCEDURE st_removecollinearpoints;

   --%test
   PROCEDURE st_densify;

   --%test
   PROCEDURE st_lineshift;

   --%test
   PROCEDURE st_parallel;

   --%test
   PROCEDURE st_getoffsetcurve;

   --%test
   PROCEDURE st_rectangle;

   --%test
   PROCEDURE st_centroid_l;

   --%test
   PROCEDURE st_centroid_p;

   --%test
   PROCEDURE st_centroid_a;

   --%test
   PROCEDURE st_multi_centroid;

   --%test
   PROCEDURE st_split_segments;

   --%test
   PROCEDURE st_split;

   --%test
   PROCEDURE st_snap;

   --%test
   PROCEDURE st_snapn;

   --%test
   PROCEDURE st_add_segment;

   --%test
   PROCEDURE st_reverse_linestring;

   --%test
   PROCEDURE st_reverse_geometry;

   --%test
   PROCEDURE st_which_side;

   --%test
   PROCEDURE st_concat_line;

   --%test
   PROCEDURE st_intersection;

   --%test
   PROCEDURE st_difference;

   --%test
   PROCEDURE st_buffer;

   --%test
   PROCEDURE st_squarebuffer;

   --%test
   PROCEDURE st_onesidedbuffer;

   --%test
   PROCEDURE st_sdo_point_equal;

   --%test
   PROCEDURE st_elem_info_equal;

   --%test
   PROCEDURE st_ordinates_equal;

   --%test
   PROCEDURE st_equals;

END test_t_geometry;
/
show errors

create or replace PACKAGE BODY test_t_geometry IS

  g_t_circular2D SPDBA.t_geometry := 
                 SPDBA.T_Geometry(
                   sdo_geometry(2002,28355,NULL,SDO_ELEM_INFO_ARRAY(1,2,2),SDO_ORDINATE_ARRAY(252230.478,5526918.373, 252400.08,5526918.373,252230.478,5527000.0)),
                   0.005,2,1
                 );
  g_t_geometry SPDBA.t_geometry := 
               SPDBA.T_Geometry(
                 SDO_GEOMETRY(3302,NULL,NULL,
                              SDO_ELEM_INFO_ARRAY(1,2,1), 
                              SDO_ORDINATE_ARRAY(
                                  2.0,2.0,0.0,
                                  2.0,4.0,3.218,
                                  8.0,4.0,12.872,
                                  12.0,4.0,19.308,
                                  12.0,10.0,28.962,
                                  8.0,10.0,35.398,
                                  5.0,14.0,43.443)),
                 0.005,2,1);
   g_t_geom2D SPDBA.t_geometry :=
            SPDBA.t_geometry(SDO_GEOMETRY(2002,NULL,NULL,
                         SDO_ELEM_INFO_ARRAY(1,2,1), 
                         SDO_ORDINATE_ARRAY(
                            2.0,2.0,
                            2.0,4.0,
                            8.0,4.0,
                            12.0,4.0,
                            12.0,10.0,
                            8.0,10.0,
                            5.0,14.0)),
                       0.005,2,1);
   g_sdo_point     mdsys.sdo_geometry := SDO_GEOMETRY(2001,NULL,SDO_POINT_TYPE(10.719,8.644,NULL),NULL,NULL);
   g_sdo_point_3D  mdsys.sdo_geometry := SDO_GEOMETRY(3301,NULL,NULL,SDO_ELEM_INFO_ARRAY(1,1,1),SDO_ORDINATE_ARRAY(8,10,35.398));

   --
   -- test t_geometry case 1: ...
   --
   PROCEDURE t_geometry IS
      l_actual   varchar2(1000);
      l_expected varchar2(1000);
      v_segment  spdba.t_segment;
      v_tgeom    spdba.T_GEOMETRY;
   BEGIN
      v_segment  := spdba.t_segment(sdo_geometry(2002,null,null,sdo_elem_info_array(1,2,1),sdo_ordinate_array(0,0,1,1)));
      v_tgeom    := spdba.T_GEO                                                                                                                                                                          )           V        ]\”Ï     ı         +        ECHO ...      SET _file=c_%%~nxa5Å_–   '   )           (          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                       (           V        ]\”Ï     ı         *        ECHO ...  SET _file=c_%%~nxa5Å_–   (   *           )          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                       (           V        ]\”Ì     ı         *        ECHO ... SET _file=c_%%~nxa5Å_–   )   +           *          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                       (           V        ]\”Ì     ı         *        ECHO ... _file=c_%%~nxa5Å_–   *   ,           +          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                       (           V        ]\”Ó     ı         *        ECHO ... =c_%%~nxa5Å_–   +   -           ,          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                         &       v   &    ]\”ˆ    ı         *      '  ECHO Copying %%a to create %fileName%ı         *    5Å_–   ,   .           -          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                         &       v   &    ]\‘.     ı         *    ı         *    5Å_–   -   /           .          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                         &       v   &    ]\‘/     ı         +        ECHO ... c_%%~nxa5Å_–   .   0           /          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                         &       v   &    ]\‘N     ı         +        SET _ffile=%_file:_sql=%5Å_–   /   1           0          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                         &       v   &    ]\‘R    ı         +        SET _ffile=%_file:_sql.html=%5Å_–   0   2           1          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                                v       ]\‘u     ı          +        COPY %%a %fileName%5Å_–   1   3           2          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                                v       ]\‘w     ı         +        ECHO ... c_%%~nxa5Å_–   2   4           3      
    ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                                v       ]\‘x     ı         +        ECHO ... ı         +    5Å_–   3   6           4      
    ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                                v       ]\‘y     ı          +        COPY %%a ı          +    5Å_–   4   7   5       6          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                                v       ]\‘†     ı         +    ı         +    5Å_–   6   8           7          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                                  v       ]\‘¢     ı         ,        ECHO ... c_%%~nxa5Å_–   7   9           8          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                                  v       ]\‘¢     ı         ,        ECHO ... _%%~nxa5Å_–   8   :           9          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                                  v       ]\‘§     ı         ,        ECHO ... %%~nxa5Å_–   9   ;           :      
    ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                                  v       ]\‘®     ı         ,        ECHO ... c_%%~nxa5Å_–   :   <           ;      	    ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                                  v       ]\‘™     ı         ,        ECHO ... %_file% ...5Å_–   ;   =           <          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                                  v       ]\‘¨     ı          ,      %  ECHO Copying %%a to create %_ffile%5Å_–   <   >           =      	    ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                                  v       ]\‘¨     ı          ,      (  ECHO ...Copying %%a to create %_ffile%5Å_–   =   ?           >          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                                  v       ]\‘≠    ı          ,      +  ECHO ......Copying %%a to create %_ffile%5Å_–   >   @           ?           ˇˇˇˇ                                                                                                                                                                                                                                                                                                                                                  v       ]\‘‰     ı         ,    ı         ,    5Å_–   ?   A           @           ˇˇˇˇ                                                                                                                                                                                                                                                                                                                            !          !          v       ]\‘Â     ı         -      1FOR %%a IN ( ..\documentation\MULTI\*.html ) DO (5Å_–   @   B           A          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                            !          !          v       ]\‘Ë     ı         -      2COPY %%a IN ( ..\documentation\MULTI\*.html ) DO (5Å_–   A   C           B          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                            !          !          v       ]\‘È     ı         -      0COPY a IN ( ..\documentation\MULTI\*.html ) DO (5Å_–   B   D           C          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                            !          !          v       ]\‘È     ı         -      .COPY IN ( ..\documentation\MULTI\*.html ) DO (5Å_–   C   E           D          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                            !          !          v       ]\‘È     ı         -      +COPY ( ..\documentation\MULTI\*.html ) DO (5Å_–   D   G           E          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                            !          !          v       ]\‘Í     ı         -      )COPY ..\documentation\MULTI\*.html ) DO (5Å_–   E   H   F       G           ˇˇˇˇ                                                                                                                                                                                                                                                                                                                            !          !          v       ]\‘Ô     ı         -      &COPY documentation\MULTI\*.html ) DO (5Å_–   G   I           H          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                            !          !          v       ]\‘˘     ı         -      1FOR %%a IN ( ..\documentation\MULTI\*.html ) DO (5Å_–   H   J           I          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                            !          !          v       ]\‘˙     ı         -      .FOR %%a IN ( documentation\MULTI\*.html ) DO (5Å_–   I   K           J          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                            !          !          v       ]\‘˙     ı         -      !FOR %%a IN ( \MULTI\*.html ) DO (5Å_–   J   L           K          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                            !          !          v       ]\‘˚     ı         -       FOR %%a IN ( MULTI\*.html ) DO (5Å_–   K   M           L          ˇˇˇˇ                                                                                                                                                                                                                                                                                                                            !          !          v       ]\‘˚     ı         -      FOR %%a IN ( \*.html ) DO (5Å_–   L   N           M          ˇˇˇˇ                                                                                                                                                                                        t_geometry.st_numrings;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_numrings;

   --
   -- test st_eleminfo case 1: ...
   --
   PROCEDURE st_eleminfo IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_eleminfo;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_eleminfo;

   --
   -- test st_numelementinfo case 1: ...
   --
   PROCEDURE st_numelementinfo IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_numelementinfo;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_numelementinfo;

   --
   -- test st_dump case 1: ...
   --
   PROCEDURE st_dump IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_dump;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_dump;

   --
   -- test st_exteriorring case 1: ...
   --
   PROCEDURE st_exteriorring IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_exteriorring;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_exteriorring;

   --
   -- test st_boundary case 1: ...
   --
   PROCEDURE st_boundary IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_boundary;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_boundary;

   --
   -- test st_length case 1: ...
   --
   PROCEDURE st_length IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_length;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_length;

   --
   -- test st_area case 1: ...
   --
   PROCEDURE st_area IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_area;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_area;

   --
   -- test st_distance case 1: ...
   --
   PROCEDURE st_distance IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_distance;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_distance;

   --
   -- test st_relate case 1: ...
   --
   PROCEDURE st_relate IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_relate;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_relate;

   --
   -- test st_swapordinates case 1: ...
   --
   PROCEDURE st_swapordinates IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_swapordinates;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_swapordinates;

   --
   -- test st_filterrings case 1: ...
   --
   PROCEDURE st_filterrings IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_filterrings;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_filterrings;

   --
   -- test st_removeinnerrings case 1: ...
   --
   PROCEDURE st_removeinnerrings IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_removeinnerrings;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_removeinnerrings;

   --
   -- test st_extract case 1: ...
   --
   PROCEDURE st_extract IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_extract;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_extract;

   --
   -- test st_extractrings case 1: ...
   --
   PROCEDURE st_extractrings IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_extractrings;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_extractrings;

   --
   -- test st_vertices case 1: ...
   --
   PROCEDURE st_vertices IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_vertices;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_vertices;

   --
   -- test st_segmentize case 1: ...
   --
   PROCEDURE st_segmentize IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_segmentize;
      -- populate expected

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_segmentize;

   --
   -- test st_flip_segments case 1: ...
   --
   PROCEDURE st_flip_segments IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_flip_segments;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_flip_segments;

   --
   -- test st_rectangle2polygon case 1: ...
   --
   PROCEDURE st_rectangle2polygon IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_rectangle2polygon;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_rectangle2polygon;

   --
   -- test st_polygon2rectangle case 1: ...
   --
   PROCEDURE st_polygon2rectangle IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_polygon2rectangle;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_polygon2rectangle;

   --
   -- test st_diminfo2rectangle case 1: ...
   --
   PROCEDURE st_diminfo2rectangle IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_diminfo2rectangle;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_diminfo2rectangle;

   --
   -- test st_geometry2diminfo case 1: ...
   --
   PROCEDURE st_geometry2diminfo IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_geometry2diminfo;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_geometry2diminfo;

   --
   -- test st_mbr case 1: ...
   --
   PROCEDURE st_mbr IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_mbr;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_mbr;

   --
   -- test st_tomultipoint case 1: ...
   --
   PROCEDURE st_tomultipoint IS
      l_actual   varchar2(1000);
      l_expected varchar2(1000);
   BEGIN
      -- populate actual
      -- t_geometry.st_tomultipoint;
      l_actual := spdba.T_Geometry(SDO_GEOMETRY(2005,NULL,SDO_POINT_TYPE(10.719,8.644,NULL),SDO_ELEM_INFO_ARRAY(1,1,1),SDO_ORDINATE_ARRAY(8,10)),0.005,3,1)
                       .ST_ToMultiPoint()
                       .ST_AsTText();
      l_expected := 'SPDBA.T_GEOMETRY(MDSYS.SDO_GEOMETRY(2005,NULL,NULL,MDSYS.SDO_ELEM_INFO_ARRAY(1,1,2),MDSYS.SDO_ORDINATE_ARRAY(8,10,10.719,8.644));TOLERANCE(.005),PRECISION(3),PROJECTED(1)';
      ut.expect(l_actual).to_equal(l_expected);
   END st_tomultipoint;

   --
   -- test st_sdopoint2ord case 1: ...
   --
   PROCEDURE st_sdopoint2ord IS
      l_actual   varchar2(1000);
      l_expected varchar2(1000);
   BEGIN
      -- populate actual
      -- t_geometry.st_sdopoint2ord;
      l_actual := spdba.T_Geometry(SDO_GEOMETRY(2005,NULL,SDO_POINT_TYPE(10.719,8.644,NULL),NULL,NULL),0.005,3,1)
                       .ST_SdoPoint2Ord()
                       .ST_AsTText();
      l_expected := 'SPDBA.T_GEOMETRY(MDSYS.SDO_GEOMETRY(2001,NULL,NULL,MDSYS.SDO_ELEM_INFO_ARRAY(1,1,1),MDSYS.SDO_ORDINATE_ARRAY(10.719,8.644));TOLERANCE(.005),PRECISION(3),PROJECTED(1)';
      ut.expect(l_actual).to_equal(l_expected);
   END st_sdopoint2ord;

   --
   -- test st_ord2sdopoint case 1: ...
   --
   PROCEDURE st_ord2sdopoint IS
      l_actual   varchar2(1000);
      l_expected varchar2(1000);
   BEGIN
      -- populate actual
      -- t_geometry.st_ord2sdopoint;
      l_actual := spdba.T_Geometry(SDO_GEOMETRY(2005, NULL, NULL, SDO_ELEM_INFO_ARRAY(1, 1, 1), SDO_ORDINATE_ARRAY(10.719, 8.644)),0.005,3,1)
                       .ST_ord2SdoPoint()
                       .ST_AsTText();
      l_expected := 'SPDBA.T_GEOMETRY(MDSYS.SDO_GEOMETRY(2001,NULL,MDSYS.SDO_POINT_TYPE(10.719,8.644,NULL),NULL,NULL);TOLERANCE(.005),PRECISION(3),PROJECTED(1)';
      ut.expect(l_actual).to_equal(l_expected);
   END st_ord2sdopoint;

   --
   -- test st_envelope case 1: ...
   --
   PROCEDURE st_envelope IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_envelope;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_envelope;

   --
   -- test st_polygon2line case 1: ...
   --
   PROCEDURE st_polygon2line IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_polygon2line;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_polygon2line;

   --
   -- test st_multi case 1: ...
   --
   PROCEDURE st_multi IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_multi;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_multi;

   --
   -- test st_append case 1: ...
   --
   PROCEDURE st_append IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_append;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_append;

   --
   -- test st_rotate case 1: ...
   --
   PROCEDURE st_rotate IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_rotate;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_rotate;

   --
   -- test st_scale case 1: ...
   --
   PROCEDURE st_scale IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_scale;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_scale;

   --
   -- test st_translate case 1: ...
   --
   PROCEDURE st_translate IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_translate;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_translate;

   --
   -- test st_reflect case 1: ...
   --
   PROCEDURE st_reflect IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_reflect;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_reflect;

   --
   -- test st_rottransscale case 1: ...
   --
   PROCEDURE st_rottransscale IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_rottransscale;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_rottransscale;

   --
   -- test st_affine case 1: ...
   --
   PROCEDURE st_affine IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_affine;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_affine;

   --
   -- test st_fixordinates case 1: ...
   --
   PROCEDURE st_fixordinates IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_fixordinates;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_fixordinates;

   --
   -- test st_vertexn case 1: ...
   --
   PROCEDURE st_vertexn IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_vertexn;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_vertexn;

   --
   -- test st_startvertex case 1: ...
   --
   PROCEDURE st_startvertex IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_startvertex;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_startvertex;

   --
   -- test st_endvertex case 1: ...
   --
   PROCEDURE st_endvertex IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_endvertex;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_endvertex;

   --
   -- test st_pointn case 1: ...
   --
   PROCEDURE st_pointn IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_pointn;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_pointn;

   --
   -- test st_startpoint case 1: ...
   --
   PROCEDURE st_startpoint IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_startpoint;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_startpoint;

   --
   -- test st_endpoint case 1: ...
   --
   PROCEDURE st_endpoint IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_endpoint;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_endpoint;

   --
   -- test st_segmentn case 1: ...
   --
   PROCEDURE st_segmentn IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_segmentn;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_segmentn;

   --
   -- test st_startsegment case 1: ...
   --
   PROCEDURE st_startsegment IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_startsegment;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_startsegment;

   --
   -- test st_endsegment case 1: ...
   --
   PROCEDURE st_endsegment IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_endsegment;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_endsegment;

   --
   -- test st_insertvertex case 1: ...
   --
   PROCEDURE st_insertvertex IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_insertvertex;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_insertvertex;

   --
   -- test st_updatevertex case 1: ...
   --
   PROCEDURE st_updatevertex IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_updatevertex;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_updatevertex;

   --
   -- test st_deletevertex case 1: ...
   --
   PROCEDURE st_deletevertex IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_deletevertex;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_deletevertex;

   --
   -- test st_removeduplicatevertices case 1: ...
   --
   PROCEDURE st_removeduplicatevertices IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_removeduplicatevertices;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_removeduplicatevertices;

   --
   -- test st_extend case 1: ...
   --
   PROCEDURE st_extend IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_extend;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_extend;

   --
   -- test st_reduce case 1: ...
   --
   PROCEDURE st_reduce IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_reduce;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_reduce;

   --
   -- test st_cogo2line case 1: ...
   --
   PROCEDURE st_cogo2line IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_cogo2line;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_cogo2line;

   --
   -- test st_line2cogo case 1: ...
   --
   PROCEDURE st_line2cogo IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_line2cogo;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_line2cogo;

   --
   -- test st_cogo2polygon case 1: ...
   --
   PROCEDURE st_cogo2polygon IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_cogo2polygon;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_cogo2polygon;

   --
   -- test st_travellingsalesman case 1: ...
   --
   PROCEDURE st_travellingsalesman IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_travellingsalesman;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_travellingsalesman;

   --
   -- test st_compress case 1: ...
   --
   PROCEDURE st_compress IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_compress;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_compress;

   --
   -- test st_decompress case 1: ...
   --
   PROCEDURE st_decompress IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_decompress;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_decompress;

   --
   -- test st_to2d case 1: ...
   --
   PROCEDURE st_to2d IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_to2d;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_to2d;

   --
   -- test st_to3d case 1: ...
   --
   PROCEDURE st_to3d IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_to3d;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_to3d;

   --
   -- test st_fixz case 1: ...
   --
   PROCEDURE st_fixz IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_fixz;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_fixz;

   --
   -- test st_tile case 1: ...
   --
   PROCEDURE st_tile IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_tile;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_tile;

   --
   -- test st_smoothtile case 1: ...
   --
   PROCEDURE st_smoothtile IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_smoothtile;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_smoothtile;

   --
   -- test st_removecollinearpoints case 1: ...
   --
   PROCEDURE st_removecollinearpoints IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_removecollinearpoints;
      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_removecollinearpoints;

   --
   -- test st_densify case 1: ...
   --
   PROCEDURE st_densify IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_densify;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_densify;

   --
   -- test st_lineshift case 1: ...
   --
   PROCEDURE st_lineshift IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lineshift;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lineshift;

   --
   -- test st_parallel case 1: ...
   --
   PROCEDURE st_parallel IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_parallel;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_parallel;

   --
   -- test st_getoffsetcurve case 1: ...
   --
   PROCEDURE st_getoffsetcurve IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_getoffsetcurve;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_getoffsetcurve;

   --
   -- test st_rectangle case 1: ...
   --
   PROCEDURE st_rectangle IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_rectangle;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_rectangle;

   --
   -- test st_centroid_l case 1: ...
   --
   PROCEDURE st_centroid_l IS
      l_actual   varchar2(1000);
      l_expected varchar2(1000);
      lrs_route  spdba.t_geometry;
   BEGIN
/*

set serveroutput on size unlimited
With lrs_routes As (
  Select T_Geometry(
 SDO_GEOMETRY(3306,NULL,NULL,
              SDO_ELEM_INFO_ARRAY(1,4,3, 1,2,1, 7,2,2, 13,2,1, 25,2,1),
              SDO_ORDINATE_ARRAY(
                1.0,0.0,0.0,  2.0,0.0,1.0, 
                3.0,0.0,2.0,  4.0,1.0,3.571, 5.0,0.0,5.14, 
                5.0,-0.5,5.64, 3.0,-0.5,7.64, 2.0,-0.48,8.64,
                0.33,-1.17,8.64, 1.57,-1.85,10.06, 
                2.64,-1.25,11.28, 3.68,-1.92,12.52))
              ,0.005) as geom
   From dual
)
Select t.which||'_2D' as Position,
       a.geom.ST_AsEWKT() as geom2d,
       a.geom.ST_Centroid_L(t.which)
             .ST_Round(3)
             .ST_AsEWKT()
        as centroid
  From lrs_routes a,
       (Select case level 
               when 1 then 'SMALLEST' 
               when 2 then 'LARGEST' 
               when 3 then 'MULTI' 
               end as which 
              From dual 
           connect by level < 4) t 
  order by 1;
*/
      -- populate actual
      -- t_geometry.st_centroid_l;
      lrs_route := spdba.T_Geometry(
                     SDO_GEOMETRY(3306,NULL,NULL,
                                  SDO_ELEM_INFO_ARRAY(1,4,3, 1,2,1, 7,2,2, 13,2,1, 25,2,1),
                                  SDO_ORDINATE_ARRAY(
                                    1.0,0.0,0.0,  2.0,0.0,1.0, 
                                    3.0,0.0,2.0,  4.0,1.0,3.571, 5.0,0.0,5.14, 
                                    5.0,-0.5,5.64, 3.0,-0.5,7.64, 2.0,-0.48,8.64,
                                    0.33,-1.17,8.64, 1.57,-1.85,10.06, 
                                    2.64,-1.25,11.28, 3.68,-1.92,12.52))
                                  ,0.005);

     l_actual := lrs_route
                    .ST_Centroid_L('SMALLEST')
                    .ST_Round(3)
                    .ST_AsEWKT();
     l_expected:= 'POINTM (2.079 -1.565 10.64)';
     ut.expect(l_actual).to_equal(l_expected);

     l_actual := lrs_route
                     .ST_Centroid_L('LARGEST')
                     .ST_Round(3)
                     .ST_AsEWKT();
     l_expected:= 'POINTM (4.802 .597 4.5)';
     ut.expect(l_actual).to_equal(l_expected);

     l_actual := lrs_route
                     .ST_Centroid_L('MULTI')
                     .ST_Round(3)
                     .ST_AsEWKT();
     l_expected:= 'MULTIPOINTZ ((4.802 .597 4.5), (2.079 -1.565 10.64))';
     ut.expect(l_actual).to_equal(l_expected);

   END st_centroid_l;

   --
   -- test st_centroid_p case 1: ...
   --
   PROCEDURE st_centroid_p IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_centroid_p;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_centroid_p;

   --
   -- test st_centroid_a case 1: ...
   --
   PROCEDURE st_centroid_a IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_centroid_a;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_centroid_a;

   --
   -- test st_multi_centroid case 1: ...
   --
   PROCEDURE st_multi_centroid IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_multi_centroid;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_multi_centroid;

   --
   -- test st_split_segments case 1: ...
   --
   PROCEDURE st_split_segments IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_split_segments;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_split_segments;

   --
   -- test st_split case 1: ...
   --
   PROCEDURE st_split IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_split;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_split;

   --
   -- test st_snap case 1: ...
   --
   PROCEDURE st_snap IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_snap;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_snap;

   --
   -- test st_snapn case 1: ...
   --
   PROCEDURE st_snapn IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_snapn;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_snapn;

   --
   -- test st_add_segment case 1: ...
   --
   PROCEDURE st_add_segment IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_add_segment;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_add_segment;

   --
   -- test st_reverse_linestring case 1: ...
   --
   PROCEDURE st_reverse_linestring IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_reverse_linestring;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_reverse_linestring;

   --
   -- test st_reverse_geometry case 1: ...
   --
   PROCEDURE st_reverse_geometry IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_reverse_geometry;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_reverse_geometry;

   --
   -- test st_which_side case 1: ...
   --
   PROCEDURE st_which_side IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_which_side;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_which_side;

   --
   -- test st_concat_line case 1: ...
   --
   PROCEDURE st_concat_line IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_concat_line;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_concat_line;

   --
   -- test st_intersection case 1: ...
   --
   PROCEDURE st_intersection IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_intersection;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_intersection;

   --
   -- test st_difference case 1: ...
   --
   PROCEDURE st_difference IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_difference;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_difference;

   --
   -- test st_buffer case 1: ...
   --
   PROCEDURE st_buffer IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_buffer;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_buffer;

   --
   -- test st_squarebuffer case 1: ...
   --
   PROCEDURE st_squarebuffer IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_squarebuffer;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_squarebuffer;

   --
   -- test st_onesidedbuffer case 1: ...
   --
   PROCEDURE st_onesidedbuffer IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_onesidedbuffer;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_onesidedbuffer;

   --
   -- test st_lrs_dim case 1: ...
   --
   PROCEDURE st_lrs_dim IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_dim;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_dim;

   --
   -- test st_lrs_ismeasured case 1: ...
   --
   PROCEDURE st_lrs_ismeasured IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_ismeasured;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_ismeasured;

   --
   -- test st_lrs_get_measure case 1: ...
   --
   PROCEDURE st_lrs_get_measure IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_get_measure;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_get_measure;

   --
   -- test st_lrs_project_point case 1: ...
   --
   PROCEDURE st_lrs_project_point IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_project_point;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_project_point;

   --
   -- test st_lrs_find_measure case 1: ...
   --
   PROCEDURE st_lrs_find_measure IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_find_measure;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_find_measure;

   --
   -- test st_lrs_find_measuren case 1: ...
   --
   PROCEDURE st_lrs_find_measuren IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_find_measuren;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_find_measuren;

   --
   -- test st_lrs_find_offset case 1: ...
   --
   PROCEDURE st_lrs_find_offset IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_find_offset;
      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_find_offset;

   --
   -- test st_lrs_add_measure case 1: ...
   --
   PROCEDURE st_lrs_add_measure IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_add_measure;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_add_measure;

   --
   -- test st_lrs_update_measures case 1: ...
   --
   PROCEDURE st_lrs_update_measures IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_update_measures;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_update_measures;

   --
   -- test st_lrs_reset_measure case 1: ...
   --
   PROCEDURE st_lrs_reset_measure IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_reset_measure;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_reset_measure;

   --
   -- test st_lrs_reverse_measure case 1: ...
   --
   PROCEDURE st_lrs_reverse_measure IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_reverse_measure;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_reverse_measure;

   --
   -- test st_lrs_scale_measures case 1: ...
   --
   PROCEDURE st_lrs_scale_measures IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_scale_measures;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_scale_measures;

   --
   -- test st_lrs_concatenate case 1: ...
   --
   PROCEDURE st_lrs_concatenate IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_concatenate;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_concatenate;

   --
   -- test st_lrs_start_measure case 1: ...
   --
   PROCEDURE st_lrs_start_measure IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_start_measure;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_start_measure;

   --
   -- test st_lrs_end_measure case 1: ...
   --
   PROCEDURE st_lrs_end_measure IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_end_measure;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_end_measure;

   --
   -- test st_lrs_measure_range case 1: ...
   --
   PROCEDURE st_lrs_measure_range IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_measure_range;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_measure_range;

   --
   -- test st_lrs_is_measure_decreasing case 1: ...
   --
   PROCEDURE st_lrs_is_measure_decreasing IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_is_measure_decreasing;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_is_measure_decreasing;

   --
   -- test st_lrs_is_measure_increasing case 1: ...
   --
   PROCEDURE st_lrs_is_measure_increasing IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_is_measure_increasing;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_is_measure_increasing;

   --
   -- test st_lrs_is_shape_pt_measure case 1: ...
   --
   PROCEDURE st_lrs_is_shape_pt_measure IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_is_shape_pt_measure;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_is_shape_pt_measure;

   --
   -- test st_lrs_measure_to_percentage case 1: ...
   --
   PROCEDURE st_lrs_measure_to_percentage IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_measure_to_percentage;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_measure_to_percentage;

   --
   -- test st_lrs_percentage_to_measure case 1: ...
   --
   PROCEDURE st_lrs_percentage_to_measure IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_percentage_to_measure;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_percentage_to_measure;

   --
   -- test st_lrs_locate_measure case 1: ...
   --
   PROCEDURE st_lrs_locate_measure IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_locate_measure;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_locate_measure;

   --
   -- test st_lrs_locate_point case 1: ...
   --
   PROCEDURE st_lrs_locate_point IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_locate_point;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_locate_point;

   --
   -- test st_lrs_locate_along case 1: ...
   --
   PROCEDURE st_lrs_locate_along IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_locate_along;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_locate_along;

   --
   -- test st_lrs_locate_measures case 1: ...
   --
   PROCEDURE st_lrs_locate_measures IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_locate_measures;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_locate_measures;

   --
   -- test st_lrs_locate_between case 1: ...
   --
   PROCEDURE st_lrs_locate_between IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_locate_between;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_locate_between;

   --
   -- test st_lrs_valid_measure case 1: ...
   --
   PROCEDURE st_lrs_valid_measure IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_valid_measure;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_valid_measure;

   --
   -- test st_lrs_valid_point case 1: ...
   --
   PROCEDURE st_lrs_valid_point IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_valid_point;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_valid_point;

   --
   -- test st_lrs_valid_segment case 1: ...
   --
   PROCEDURE st_lrs_valid_segment IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_valid_segment;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_valid_segment;

   --
   -- test st_lrs_valid_geometry case 1: ...
   --
   PROCEDURE st_lrs_valid_geometry IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_valid_geometry;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_valid_geometry;

   --
   -- test st_lrs_intersection case 1: ...
   --
   PROCEDURE st_lrs_intersection IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_lrs_intersection;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_lrs_intersection;

   --
   -- test st_sdo_point_equal case 1: ...
   --
   PROCEDURE st_sdo_point_equal IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      -- t_geometry.st_sdo_point_equal;
      l_actual := spdba.t_geometry(sdo_geometry(2001,null,sdo_point_type(0,0,null),null,null),0.005,3,1)
                       .ST_Sdo_Point_Equal(p_sdo_point   => sdo_point_type(0,0,null),
                                           p_z_precision => 2);
      l_expected := 1;
      ut.expect(l_actual).to_equal(l_expected);

      l_actual := spdba.t_geometry(sdo_geometry(3001,null,sdo_point_type(0.29380238,0.2389230893,23.93837),null,null),0.005,3,1)
                       .ST_Sdo_Point_Equal(p_sdo_point   => sdo_point_type(0.29380238,0.2389230893,23.93837),
                                           p_z_precision => 2);
      l_expected := 1;
      ut.expect(l_actual).to_equal(l_expected);

      l_actual := spdba.t_geometry(sdo_geometry(3001,null,sdo_point_type(0.29380238,0.2389230893,23.93837),null,null),0.005,3,1)
                       .ST_Sdo_Point_Equal(p_sdo_point   => sdo_point_type(1.29380238,0.2389230893,23.93837),
                                           p_z_precision => 2);
      l_expected := -1;
      ut.expect(l_actual).to_equal(l_expected);

   END st_sdo_point_equal;

   --
   -- test st_elem_info_equal case 1: ...
   --
   PROCEDURE st_elem_info_equal IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      -- t_geometry.st_elem_info_equal;
      l_actual := spdba.t_geometry(sdo_geometry(2002,28355,NULL,SDO_ELEM_INFO_ARRAY(1,2,2),SDO_ORDINATE_ARRAY(252230.478,5526918.373, 252400.08,5526918.373,252230.478,5527000.0)),0.005,3,1)
                       .st_elem_info_equal(p_elem_info => SDO_ELEM_INFO_ARRAY(1,2,2));
      l_expected := 1;
      ut.expect(l_actual).to_equal(l_expected);
   END st_elem_info_equal;

   --
   -- test st_ordinates_equal case 1: ...
   --
   PROCEDURE st_ordinates_equal IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      -- t_geometry.st_ordinates_equal;
      l_actual := spdba.t_geometry(sdo_geometry(2002,28355,NULL,SDO_ELEM_INFO_ARRAY(1,2,2),SDO_ORDINATE_ARRAY(252230.478,5526918.373, 252400.08,5526918.373,252230.478,5527000.0)),0.005,3,1)
                       .ST_Ordinates_Equal(p_ordinates   => mdsys.sdo_ordinate_array(252230.478,5526918.373, 252400.08,5526918.373,252230.478,5527000.0),
                                           p_z_precision => 3,
                                           p_m_precision => 2);
      l_expected := 1;
      ut.expect(l_actual).to_equal(l_expected);
   END st_ordinates_equal;

   --
   -- test st_equals case 1: ...
   --
   PROCEDURE st_equals IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 0;
   BEGIN
      -- populate actual
      -- t_geometry.st_equals;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END st_equals;

END test_t_geometry;
/
show errors

set serveroutput on size unlimited
set long 800
set linesize 800
begin ut.run('test_t_geometry'); end;


/*
Test:

1. Constructors.
2. ST_Release
ST_SetProjection
ST_SetSdoGtype
ST_SetSrid
ST_SetPrecision
ST_SetTolerance
Nothing till...
ST_AsEWKT
ST_isEmpty
ST_isClosed
ST_NumSegments
ST_Dimension
ST_hasDimension


'<gml:Polygon srsName="SDO:" xmlns:gml="http://www.opengis.net/gml"><gml:exterior><gml:LinearRing><gml:posList srsDimension="2">5.0 1.0 8.0 1.0 8.0 6.0 5.0 7.0 5.0 1.0</gml:posList></gml:LinearRing></gml:exterior></gml:Polygon>'
'<gml:Polygon srsName="SDO:" xmlns:gml="http://www.opengis.net/gml"><gml:outerBoundaryIs><gml:LinearRing><gml:coordinates decimal="." cs="," ts=" ">5.0,1.0 8.0,1.0 8.0,6.0 5.0,7.0 5.0,1.0</gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon>'

'POINTZ (-123.08963356 49.27575579 70)'
select spdba.t_geometry(TO_CLOB('POINTZ (-123.08963356 49.27575579 70)')).geom from dual;
'SRID=28355;POINTZ (-123.08963356 49.27575579 70)'
select spdba.t_geometry(TO_CLOB('SRID=28355;POINTZ (-123.08963356 49.27575579 70)')).geom from dual;

'LINESTRING (1 1,2 1,3 1)'
'LINESTRING M (1 1 20,2 1 30,3 1 40)'
'LINESTRING Z (1 1 20,2 1 30,3 1 40)'
'LINESTRING ZM (1 1 20 0,2 1 30 10,3 1 40 20)'
'POLYGON Z ((0 0 10,0 1 20,1 1 30,1 0 40,0 0 10))'
'SRID=8307;LINESTRING Z ((0 0 10,0 1 20,1 1 30,1 0 40))'
'SRID=8307;POLYGON Z ((0 0 10,0 1 20,1 1 30,1 0 40,0 0 10))'
SDO_GEOMETRY(2001,28355,sdo_point_type(1,1,NULL),NULL,NULL)
SDO_GEOMETRY(2001, 8307,sdo_point_type(147.5,-32.7,NULL),NULL,NULL)
SDO_GEOMETRY(2001, NULL,sdo_point_type(147.5,-32.7,NULL),NULL,NULL)
SDO_GEOMETRY(2002,28355,NULL,SDO_ELEM_INFO_ARRAY(1,2,1),SDO_ORDINATE_ARRAY(1,1,2,1,3,1))
SDO_GEOMETRY(3001,28355,sdo_point_type(1,1,1),NULL,NULL)
SDO_GEOMETRY(3001, NULL,sdo_point_type(1,1,1),NULL,NULL)
SDO_GEOMETRY(3003, 8307,NULL,SDO_ELEM_INFO_ARRAY(1,1003,1),SDO_ORDINATE_ARRAY(0,0,10,1,0,40,1,1,30,0,1,20,0,0,10))

*/
