DROP FUNCTION IF EXISTS spdba.ST_Chop(geometry,numeric,int,int,int);

CREATE FUNCTION spdba.ST_Chop(
    p_geometry     geometry,
    p_distance     numeric,
    p_round_xy     int default 3, -- For comparing ordinates of xy coordinates
    p_treat_as_one int default 0, -- Treat MultiLineString as single object if 1, otherwise break in to LineStrings if 0
    p_mode         int default 0  -- Processing mode: 0 returns all segments even if < p_distance; 1 causes segment < p_distance to be merged with previous segment.
)
RETURNS SETOF spdba.segments 
     LANGUAGE 'plpgsql'
     COST 100
     IMMUTABLE 
     ROWS 1000
  /****f* GEOPROCESSING/ST_Chop
  *  NAME
  *    ST_Chop -- Splits a (multi)linestring into individual linestrings.
  *  SYNOPSIS
  *    CREATE OR REPLACE FUNCTION spdba.ST_Chop(
  *        p_geometry geometry,
  *        p_distance numeric,
  *        p_round_xy int default 3,     -- For comparing ordinates of xy coordinates
  *        p_treat_as_one int default 0, -- Treat MultiLineString as single object if 1, otherwise break in to LineStrings if 0
  *        p_mode         int default 0  -- Processing mode: 0 returns all segments even if < p_distance; 1 causes segment < p_distance to be merged with previous segment.
  *    )
  *    RETURNS SETOF spdba.segments 
  *  ARGUMENTS
  *    p_geometry (geometry) -- LineString or MultiLineString.
  *    p_distance  (numeric) -- Desired length of individual segmenets generated by function.
  *    p_round_xy      (int) -- For comparing ordinates of xy coordinates. Result ordinates are not rounded (See ST_SnapToGrid).
  *    p_treat_as_one  (int) -- Treat MultiLineString as single object if 1, otherwise break in to LineStrings if 0
  *    p_mode          (int) -- Processing mode: 0 returns all segments even if < p_distance; 1 causes segment < p_distance to be merged with previous segment.
  *  RESULT
  *    Set of LineStrings (set of geometry) -- Collection / Set of individual linestrings.
  *  DESCRIPTION
  *    This function chops/cuts the input geometry into linestring geometries (segments) of length p_distance.
  *    If p_treat_as_one is set to 1, and p_geometry is a MultiLineString, the segments are created by cutting up the MultiLineString as if it were a single linestring.
  *    This can mean that a returned segment cross from one linestring to the next thus returning it as a MultiLineString.
  *    If p_treat_as_one is set to 0, each LineString is chopped without reference to any other LineString.
  *    If the last segment to be returned is < p_distance and p_mode = 0 it is returned; if p_mode = 1 the segment is joined to the previous LineString such that the returned segment is > p_distance but < p_distance * 2.0
  *  EXAMPLE
  *    -- Chop MultiLineString's individual LineStrings last segment is balance of length (< p_distance)
  *    select (a.segs).id,
  *           ROUND(ST_Length((a.segs).segment)::numeric,3) as len, 
  *           ST_AsText(
  *             ST_SnapToGrid((a.segs).segment,0.001)
  *           ) as geom
  *      from (select spdba.ST_Chop(
  *                     /* p_geometry     */ ST_GeomFromText('MULTILINESTRING((0 0,100 0),(200 0,300 300))'),
  *                     /* p_distance     */ 40.0,
  *                     /* p_round_xy     */    3,
  *                     /* p_treat_as_one */    0,
  *                     /* p_mode         */    0
  *                   ) as segs
  *           ) as a;
  * 
  *    id   len     geom
  *    text numeric geometry
  *    ---- ------- -------------------------------------------
  *    1    40.000  LINESTRING(0 0,40 0)
  *    2    40.000  LINESTRING(40 0,80 0)
  *    3    20.000  LINESTRING(80 0,100 0)
  *    4    40.000  LINESTRING(200 0,212.649 37.947)
  *    5    40.000  LINESTRING(212.649 37.947,225.298 75.895)
  *    6    40.000  LINESTRING(225.298 75.895,237.947 113.842)
  *    7    40.000  LINESTRING(237.947 113.842,250.596 151.789)
  *    8    40.000  LINESTRING(250.596 151.789,263.246 189.737)
  *    9    40.000  LINESTRING(263.246 189.737,275.895 227.684)
  *    10   40.000  LINESTRING(275.895 227.684,288.544 265.631)
  *    11   36.228  LINESTRING(288.544 265.631,300 300)
  *    
  *    -- Process individual LineStrings of the MultiLineString with last segment merge
  *    select (a.segs).id,
  *           ROUND(ST_Length((a.segs).segment)::numeric,3) as len, 
  *           ST_AsText(
  *             ST_SnapToGrid((a.segs).segment,0.001)
  *           ) as geom
  *      from (select spdba.ST_Chop(
  *                     /* p_geometry     */ ST_GeomFromText('MULTILINESTRING((0 0,100 0),(200 0,300 300))'),
  *                     /* p_distance     */ 40.0,
  *                     /* p_round_xy     */    3,
  *                     /* p_treat_as_one */    0,
  *                     /* p_mode         */    1
  *                   ) as segs
  *           ) as a;
  *    
  *    id    len     geom
  *    text  numeric geometry
  *    ----- ------- ------------------------------------------------------
  *    1     40.000  LINESTRING(0 0,40 0)
  *    2     60.000  LINESTRING(40 0,80 0,100 0)
  *    4     40.000  LINESTRING(200 0,212.649 37.947)
  *    5     40.000  LINESTRING(212.649 37.947,225.298 75.895)
  *    6     40.000  LINESTRING(225.298 75.895,237.947 113.842)
  *    7     40.000  LINESTRING(237.947 113.842,250.596 151.789)
  *    8     40.000  LINESTRING(250.596 151.789,263.246 189.737)
  *    9     40.000  LINESTRING(263.246 189.737,275.895 227.684)
  *    10    76.228  LINESTRING(275.895 227.684,288.544 265.631,300 300)
  *    
  *    -- Treat MultiLineString as one
  *    select (a.segs).id,
  *           ROUND(ST_Length((a.segs).segment)::numeric,3) as len, 
  *           ST_AsText(
  *             ST_SnapToGrid((a.segs).segment,0.001)
  *           ) as geom
  *      from (select spdba.ST_Chop(
  *                     /* p_geometry     */ ST_GeomFromText('MULTILINESTRING((0 0,100 0),(200 0,300 300))'),
  *                     /* p_distance     */ 40.0,
  *                     /* p_round_xy     */    3,
  *                     /* p_treat_as_one */    1,
  *                     /* p_mode         */    1
  *                   ) as segs
  *           ) as a;
  * 
  *    id    len     geom
  *    text  numeric geometry
  *    ----- ------- ------------------------------------------------------
  *    1     40.000  LINESTRING(0 0,40 0)
  *    2     40.000  LINESTRING(40 0,80 0)
  *    3     40.000  MULTILINESTRING((80 0,100 0),(200 0,206.325 18.974))
  *    4     40.000  LINESTRING(206.325 18.974,218.974 56.921)
  *    5     40.000  LINESTRING(218.974 56.921,231.623 94.868)
  *    6     40.000  LINESTRING(231.623 94.868,244.272 132.816)
  *    7     40.000  LINESTRING(244.272 132.816,256.921 170.763)
  *    8     40.000  LINESTRING(256.921 170.763,269.57 208.71)
  *    9     40.000  LINESTRING(269.57 208.71,282.219 246.658)
  *    10    56.228  LINESTRING(282.219 246.658,294.868 284.605,300 300)
  *  AUTHOR
  *    Simon Greener
  *  HISTORY
  *    Simon Greener - November 2018, Original Coding
  *  COPYRIGHT
  *    (c) 2005-2018 by TheSpatialDBAdvisor/Simon Greener
  ******/
AS $BODY$
DECLARE
    v_GeometryType   varchar(1000);
    v_wkt            text;
    v_treat_as_one   int;
    v_num_geometries int;
    v_num_segments   int;
    v_round_xy       int;
  v_mode           int;
    v_geom           geometry;
    v_seg_length     numeric;
    v_start_fraction numeric;
    v_end_fraction   numeric;
    v_id             int;
    v_hold_segment   spdba.Segments;
    v_segment        spdba.Segments;
Begin
   If ( p_geometry is NULL ) Then
     Return;
   End If;

   v_GeometryType   := ST_GeometryType(p_geometry);
   IF ( v_GeometryType NOT IN ('ST_LineString','ST_MultiLineString') ) THEN
     RETURN;
   END IF;

   v_treat_as_one   := CASE WHEN COALESCE(p_treat_as_one,0) > 0 AND v_geometryType = 'ST_MultiLineString' THEN 1 ELSE 0 END;
   v_round_xy       := COALESCE(p_round_xy,3);
   v_mode           := case when COALESCE(p_mode,0) = 0 then 0 else 1 end;
   v_num_geometries := ST_NumGeometries(p_geometry);
   v_id             := 0;

   if ( v_treat_as_one = 1 ) Then
      v_geom           := p_geometry;
      v_num_geometries := 1;
   end If;
   
   FOR v_geomN IN 1..v_num_geometries LOOP
     if ( v_treat_as_one = 0 ) Then
       v_geom := ST_GeometryN(p_geometry,v_geomN);
     End If;
     v_seg_length := ROUND(ST_Length(v_geom)::numeric,v_round_xy+1);
     -- DEBUG raise notice 'Geometry (%)  Part length (%)',v_geomN,v_seg_length;
     if ( v_seg_length <= p_distance ) then
       -- DEBUG  raise notice '   ...is less than %',p_distance;
       v_id              := v_id + 1;
       v_segment.id      := v_id;
       v_segment.segment := case when ST_NumGeometries(v_geom) = 1 then ST_GeometryN(v_geom,1) else v_geom end;
       Return Next v_segment;
       continue;
     End If;
     v_num_segments := FLOOR(v_seg_length/p_distance);
     -- DEBUG raise notice 'Processing linestring (% of %): v_num_segments (%)',v_geomN,ST_NumGeometries(p_geometry),v_num_segments;
     FOR i in 0..v_num_segments LOOP
        v_start_fraction   := (i::numeric*p_distance)/v_seg_length;
        v_end_fraction     := case when i=v_num_segments then 1.0 else ((i::numeric*p_distance)+p_distance)/v_seg_length end;
        v_id               := v_id + 1;
        v_segment.id       := v_id;
        v_segment.segment  := ST_LineSubstring(
                                v_geom, 
                                v_start_fraction, 
                                v_end_fraction
                              );
        v_segment.segment  := case when ST_NumGeometries(v_segment.segment) = 1 then ST_GeometryN(v_segment.segment,1) else v_segment.segment end;
        -- DEBUG raise notice '... Created segment (% of %) between fractions % and % of length %',i,v_num_segments,v_start_fraction,v_end_fraction,ROUND(ST_Length(v_segment.segment)::numeric,v_round_xy+1);
        IF ( ST_IsEmpty(v_segment.segment) ) Then
          continue;
        End If;
        IF ( v_mode = 0 ) THEN
          Return Next v_segment;
        ELSE
          If ( i = v_num_segments-1 ) Then
            v_hold_segment.id      := v_id;
            v_hold_segment.segment := case when ST_NumGeometries(v_segment.segment) = 1 then ST_GeometryN(v_segment.segment,1) else v_segment.segment end;
            -- DEBUG raise Notice '....... holding second last segment: %',ST_AsText(v_hold_segment.segment);
          ElsIf ( i = v_num_segments ) Then
            If ( ROUND(ST_Length(v_segment.segment)::numeric,v_round_xy+1) < p_distance ) Then
              v_hold_segment.segment := ST_LineMerge(ST_Union(v_hold_segment.segment,v_segment.segment));
              v_hold_segment.segment := case when ST_NumGeometries(v_hold_segment.segment) = 1 then ST_GeometryN(v_hold_segment.segment,1) else v_hold_segment.segment end;
              -- DEBUG raise Notice '....... merging last segment with second last segment: %',ST_AsText(v_hold_segment.segment);
              Return Next v_hold_segment;
            Else
              -- DEBUG raise Notice '....... last segment length % is same as p_distance %',round(ST_Length(v_segment.segment)::numeric,v_round_xy+1),p_distance;
              Return Next v_hold_segment;
              Return Next v_segment;
            End If;
          Else 
            Return Next v_segment;
          End If;
        End If;
     End LOOP;
   END LOOP /* linestrings */;
END;
$BODY$;

ALTER FUNCTION spdba.st_chop(geometry, numeric, int, int, int)
    OWNER TO postgres;

-- *****************************************************************************************
-- Testing
                                  
select (a.segs).id,
       ROUND(ST_Length((a.segs).segment)::numeric,3) as len, 
       ST_AsText(
         ST_SnapToGrid((a.segs).segment,0.001)
       ) as geom
  from (select spdba.ST_Chop(ST_GeomFromText('LINESTRING(0 0,100 100)'),10,3,0,1) as segs
    ) as a;

select (a.segs).id,
       ROUND(ST_Length((a.segs).segment)::numeric,3) as len, 
       ST_AsText(
         ST_SnapToGrid((a.segs).segment,0.001)
       ) as geom
  from (select spdba.ST_Chop(
                 /* p_geometry     */ ST_GeomFromText('MULTILINESTRING((0 0,100 0),(200 0,300 300))'),
                 /* p_distance     */ 40.0,
                 /* p_round_xy     */    3,
                 /* p_treat_as_one */    0,
                 /* p_mode         */    1
               ) as segs
       ) as a;

with data as (
    select 'MULTILINESTRING((211200.00809093  176227.652918149,211208.438727566 176219.007751582,211213.187775714 176214.311765441,211214.136153647 176213.503810892),(211214.136153647 176213.503810892,211217.281676258 176210.824036074,211218.446596284 176209.95087593),(211220.00809093 176208.780465207,211225.00809093 176205.032739506),(211225.117308602 176204.95087593,211231.674734425 176200.035789272,211238.839326868 176194.95087593),(211240.00809093 176194.121371109,211244.231587004 176191.123836816,211245.00809093 176190.572405853),(211245.880071676 176189.95087593,211257.621702597 176179.95087593),(211260.00809093 176177.918459523,211260.194097051 176177.760043607,211263.074308102 176174.95087593),(211265.00809093 176173.064791849,211268.200757254 176169.95087593),(211270.00809093 176168.188122002,211283.58010471 176154.95087593),(211285.00809093 176153.558112462,211288.706553862 176149.95087593),(211290.00809093 176148.681442616,211293.833003014 176144.95087593),(211295.00809093 176143.804772769,211298.959452166 176139.95087593),(211300.00809093 176138.928102922,211304.085901318 176134.95087593),(211305.00809093 176134.051433076,211309.21235047 176129.95087593),(211310.00809093 176129.174763229,211310.65222985 176128.546512659,211314.849458895 176124.95087593),(211315.00809093 176124.814980756,211320.00809093 176120.531634897),(211320.686017703 176119.95087593,211321.113531311 176119.584638202,211335.00809093 176110.10574027))'::geometry as geom
)
select (f.segs).id as gid,
       round(ST_Length((f.segs).segment)::numeric,3) as len, 
       ST_AsText((f.segs).segment)
  from (select spdba.ST_Chop(a.geom,20.0,3,1,1) as segs from data as a) as f
order by 1 desc;

select spdba.ST_Chop(ST_GeomFromText('LINESTRING(0 0,100 100)'),10,3,0,1);

select (f.segs).id,
       (f.segs).segment as geom
  from (select spdba.ST_Chop(ST_GeomFromText('LINESTRING(0 0,100 100)'),10,3,0,1) as segs ) as f;

select (a.segs).id,
       round(ST_Length((a.segs).segment)::numeric,3) as len, 
       ST_AsText((a.segs).segment) as geom
  from (select spdba.ST_Chop(ST_GeomFromText('LINESTRING(0 0,100 100)'),10,3,0,1) as segs) as a;
                             
select (a.segs).id,
       round(ST_Length((a.segs).segment)::numeric,3) as len, 
       ST_AsText((a.segs).segment) as geom
  from (select spdba.ST_Chop(ST_GeomFromText('LINESTRING(0 0,100 0)'),10,3,0,1) as segs) as a;
  
select (a.segs).id,
       ROUND(ST_Length((a.segs).segment)::numeric,3) as len, 
       ST_AsText(
         ST_SnapToGrid((a.segs).segment,0.001)
       ) as geom
  from (select spdba.ST_Chop(
                 ST_GeomFromText('MULTILINESTRING((0 0,100 0),(200 0,300 300))'),
                 40, 3, 0,1
               ) as segs
       ) as a;

select g.floodplain_id,
       g.river_id,
       g.gid,     
       g.chopLength,
       ROUND(ST_Length(g.geom)::numeric,3) as segLength, 
       ROUND(((ST_Length(g.geom) / g.chopLength ) * 100.0)::numeric,1) as insidePercentage,
       ST_AsText(g.geom) as geom
  from (select p.id_0     as floodplain_id,
               f.river_id,
               (f.segs).id as gid,
               ST_Intersection((f.segs).segment,p.geometry) as geom,
               ROUND(ST_Length((f.segs).segment)::numeric,3) as chopLength
          from (select a.objectid as river_id,
                        spdba.ST_Chop(a.geometry,20.0,3,0,1) as segs 
                  from gis.riverLine as a
               ) as f,
               gis.floodplain as p
         where ST_Length((f.segs).segment) > 0.0
       ) as g;

